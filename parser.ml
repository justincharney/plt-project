type token =
  | DOUBLECOLON
  | EOF
  | FUNC
  | PACKAGE
  | IMPORT
  | TYPE
  | STRUCT
  | RETURN
  | BREAK
  | IF
  | ELSE
  | CONTINUE
  | FOR
  | WHILE
  | CONST
  | ERROR
  | NULL
  | FINAL
  | MUT
  | LATE
  | PRIVATE
  | BOOL
  | STRING
  | U8
  | U16
  | U32
  | U64
  | I8
  | I16
  | I32
  | I64
  | F32
  | F64
  | PLUS
  | MINUS
  | DIV
  | MULT
  | MOD
  | LSHIFT
  | RSHIFT
  | BITXOR
  | BITOR
  | BITNOT
  | BITAND
  | ASSIGN
  | PLUS_ASSIGN
  | MINUS_ASSIGN
  | TIMES_ASSIGN
  | DIV_ASSIGN
  | MOD_ASSIGN
  | DECL_ASSIGN
  | LSHIFT_ASSIGN
  | RSHIFT_ASSIGN
  | BITAND_ASSIGN
  | BITXOR_ASSIGN
  | BITOR_ASSIGN
  | EQ
  | NEQ
  | LT
  | LE
  | GT
  | GE
  | AND
  | OR
  | NOT
  | INC
  | DEC
  | NEG
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | SEMICOLON
  | COLON
  | COMMA
  | DOT
  | TRIPLEDOT
  | QUESTION
  | INT_LIT of (
# 22 "parser.mly"
        int
# 86 "parser.ml"
)
  | BOOL_LIT of (
# 23 "parser.mly"
        bool
# 91 "parser.ml"
)
  | CHAR_LIT of (
# 24 "parser.mly"
        char
# 96 "parser.ml"
)
  | FLOAT_LIT of (
# 25 "parser.mly"
        float
# 101 "parser.ml"
)
  | STRING_LIT of (
# 26 "parser.mly"
        string
# 106 "parser.ml"
)
  | IDENT of (
# 27 "parser.mly"
        string
# 111 "parser.ml"
)

open Parsing
let _ = parse_error;;
# 3 "parser.mly"
 open Ast 
# 118 "parser.ml"
let yytransl_const = [|
  257 (* DOUBLECOLON *);
    0 (* EOF *);
  258 (* FUNC *);
  259 (* PACKAGE *);
  260 (* IMPORT *);
  261 (* TYPE *);
  262 (* STRUCT *);
  263 (* RETURN *);
  264 (* BREAK *);
  265 (* IF *);
  266 (* ELSE *);
  267 (* CONTINUE *);
  268 (* FOR *);
  269 (* WHILE *);
  270 (* CONST *);
  271 (* ERROR *);
  272 (* NULL *);
  273 (* FINAL *);
  274 (* MUT *);
  275 (* LATE *);
  276 (* PRIVATE *);
  277 (* BOOL *);
  278 (* STRING *);
  279 (* U8 *);
  280 (* U16 *);
  281 (* U32 *);
  282 (* U64 *);
  283 (* I8 *);
  284 (* I16 *);
  285 (* I32 *);
  286 (* I64 *);
  287 (* F32 *);
  288 (* F64 *);
  289 (* PLUS *);
  290 (* MINUS *);
  291 (* DIV *);
  292 (* MULT *);
  293 (* MOD *);
  294 (* LSHIFT *);
  295 (* RSHIFT *);
  296 (* BITXOR *);
  297 (* BITOR *);
  298 (* BITNOT *);
  299 (* BITAND *);
  300 (* ASSIGN *);
  301 (* PLUS_ASSIGN *);
  302 (* MINUS_ASSIGN *);
  303 (* TIMES_ASSIGN *);
  304 (* DIV_ASSIGN *);
  305 (* MOD_ASSIGN *);
  306 (* DECL_ASSIGN *);
  307 (* LSHIFT_ASSIGN *);
  308 (* RSHIFT_ASSIGN *);
  309 (* BITAND_ASSIGN *);
  310 (* BITXOR_ASSIGN *);
  311 (* BITOR_ASSIGN *);
  312 (* EQ *);
  313 (* NEQ *);
  314 (* LT *);
  315 (* LE *);
  316 (* GT *);
  317 (* GE *);
  318 (* AND *);
  319 (* OR *);
  320 (* NOT *);
  321 (* INC *);
  322 (* DEC *);
  323 (* NEG *);
  324 (* LPAREN *);
  325 (* RPAREN *);
  326 (* LBRACE *);
  327 (* RBRACE *);
  328 (* LBRACKET *);
  329 (* RBRACKET *);
  330 (* SEMICOLON *);
  331 (* COLON *);
  332 (* COMMA *);
  333 (* DOT *);
  334 (* TRIPLEDOT *);
  335 (* QUESTION *);
    0|]

let yytransl_block = [|
  336 (* INT_LIT *);
  337 (* BOOL_LIT *);
  338 (* CHAR_LIT *);
  339 (* FLOAT_LIT *);
  340 (* STRING_LIT *);
  341 (* IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\004\000\004\000\008\000\008\000\010\000\011\000\011\000\011\000\
\011\000\012\000\012\000\005\000\005\000\005\000\005\000\014\000\
\014\000\014\000\014\000\015\000\015\000\006\000\017\000\017\000\
\017\000\020\000\020\000\018\000\018\000\021\000\021\000\007\000\
\019\000\019\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\026\000\026\000\023\000\023\000\024\000\024\000\025\000\
\025\000\027\000\027\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\009\000\009\000\009\000\028\000\028\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\000\000"

let yylen = "\002\000\
\005\000\000\000\003\000\000\000\002\000\002\000\002\000\002\000\
\006\000\004\000\000\000\002\000\004\000\001\000\001\000\001\000\
\001\000\000\000\002\000\004\000\003\000\004\000\003\000\001\000\
\004\000\003\000\001\000\000\000\002\000\009\000\000\000\001\000\
\003\000\002\000\003\000\000\000\001\000\001\000\003\000\013\000\
\000\000\002\000\002\000\001\000\006\000\009\000\005\000\003\000\
\003\000\001\000\003\000\004\000\007\000\000\000\001\000\000\000\
\001\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\002\000\002\000\002\000\004\000\003\000\004\000\006\000\
\005\000\004\000\006\000\004\000\007\000\007\000\004\000\006\000\
\006\000\003\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\004\000\003\000\003\000\005\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\132\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\131\000\119\000\120\000\121\000\122\000\
\123\000\124\000\125\000\126\000\127\000\128\000\129\000\130\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\024\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\005\000\006\000\007\000\008\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
\114\000\000\000\112\000\113\000\000\000\000\000\000\000\000\000\
\000\000\000\000\107\000\108\000\109\000\110\000\111\000\000\000\
\000\000\000\000\000\000\021\000\000\000\000\000\000\000\000\000\
\000\000\010\000\000\000\020\000\000\000\000\000\025\000\089\000\
\090\000\091\000\092\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\034\000\000\000\000\000\
\016\000\015\000\017\000\014\000\000\000\000\000\000\000\116\000\
\000\000\000\000\106\000\000\000\000\000\000\000\094\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\063\000\
\062\000\064\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\035\000\000\000\000\000\037\000\
\033\000\009\000\012\000\000\000\115\000\093\000\000\000\000\000\
\000\000\000\000\000\000\098\000\000\000\103\000\095\000\000\000\
\000\000\100\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\059\000\000\000\097\000\000\000\000\000\000\000\
\039\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\000\000\000\000\000\000\000\000\000\000\013\000\105\000\104\000\
\000\000\000\000\000\000\096\000\099\000\000\000\000\000\000\000\
\000\000\000\000\055\000\000\000\000\000\000\000\000\000\043\000\
\030\000\042\000\000\000\102\000\101\000\118\000\000\000\049\000\
\000\000\048\000\000\000\000\000\000\000\000\000\000\000\051\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\047\000\
\040\000\000\000\045\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\000\046\000\000\000\000\000\053\000"

let yydgoto = "\002\000\
\004\000\007\000\027\000\028\000\232\000\030\000\031\000\141\000\
\190\000\142\000\143\000\238\000\152\000\032\000\076\000\074\000\
\079\000\191\000\235\000\080\000\192\000\236\000\027\001\252\000\
\019\001\249\000\153\000\155\000"

let yysindex = "\006\000\
\010\255\000\000\209\254\000\000\035\255\213\254\004\255\035\255\
\225\254\226\254\111\006\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\193\254\248\254\057\000\004\255\004\255\004\255\004\255\241\254\
\000\000\000\000\243\254\015\255\255\254\042\255\002\255\220\255\
\021\255\231\011\000\000\000\000\000\000\000\000\000\000\054\255\
\220\255\023\255\029\255\220\255\231\011\054\255\001\255\000\000\
\000\000\220\255\000\000\000\000\231\011\231\011\231\011\231\011\
\115\255\028\010\000\000\000\000\000\000\000\000\000\000\014\255\
\013\014\036\255\231\011\000\000\041\255\115\005\044\255\040\255\
\114\255\000\000\013\014\000\000\220\255\038\255\000\000\000\000\
\000\000\000\000\000\000\231\011\158\013\198\007\238\012\039\255\
\231\011\231\011\231\011\063\255\231\011\231\011\231\011\231\011\
\231\011\231\011\231\011\231\011\231\011\231\011\231\011\231\011\
\231\011\231\011\231\011\231\011\231\011\231\011\231\011\231\011\
\231\011\231\011\231\011\231\011\231\011\231\011\231\011\231\011\
\231\011\231\011\013\014\069\255\220\255\000\000\220\255\023\255\
\000\000\000\000\000\000\000\000\084\255\114\255\071\255\000\000\
\220\255\195\013\000\000\055\255\089\255\029\009\000\000\028\012\
\091\255\173\012\090\255\130\012\095\255\092\255\092\255\000\000\
\000\000\000\000\203\255\203\255\006\006\178\005\175\004\013\014\
\013\014\013\014\013\014\013\014\013\014\013\014\013\014\013\014\
\013\014\013\014\181\006\181\006\007\004\007\004\007\004\007\004\
\248\011\172\255\232\013\096\255\000\000\106\255\097\255\000\000\
\000\000\000\000\000\000\220\255\000\000\000\000\231\011\231\011\
\118\255\119\255\231\011\000\000\231\011\000\000\000\000\124\010\
\231\011\000\000\023\255\220\255\037\255\121\255\113\255\120\255\
\231\011\231\011\000\000\062\012\000\000\013\013\124\255\125\255\
\000\000\063\011\231\011\024\005\231\011\153\011\003\255\000\000\
\206\012\036\255\130\255\037\255\231\011\000\000\000\000\000\000\
\131\255\132\255\231\011\000\000\000\000\220\255\140\255\096\012\
\143\255\044\013\000\000\144\255\082\013\198\007\021\255\000\000\
\000\000\000\000\013\014\000\000\000\000\000\000\122\255\000\000\
\231\011\000\000\037\255\231\011\037\255\089\255\037\255\000\000\
\148\255\013\014\146\255\151\255\152\255\214\255\231\011\000\000\
\000\000\007\255\000\000\156\255\231\011\037\255\037\255\120\013\
\183\255\184\255\037\255\000\000\000\000\185\255\214\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\213\009\000\000\227\000\213\009\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\173\255\000\000\227\000\227\000\227\000\227\000\000\000\
\000\000\000\000\000\000\000\000\000\000\173\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\179\008\
\000\000\188\255\000\000\000\000\000\000\179\008\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\007\009\000\000\000\000\000\000\000\000\000\000\000\000\191\255\
\190\255\000\000\098\009\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\182\009\000\000\000\000\000\000\193\255\188\255\
\000\000\000\000\000\000\000\000\000\000\190\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\255\
\000\000\000\000\000\000\000\000\000\000\001\000\085\000\000\000\
\000\000\000\000\169\000\253\000\171\003\006\004\087\003\002\005\
\093\005\177\005\005\006\089\006\180\006\008\007\092\007\176\007\
\011\008\095\008\175\002\003\003\088\001\172\001\000\002\084\002\
\090\004\174\004\000\000\000\000\000\000\197\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\188\255\000\000\202\255\133\255\000\000\000\000\
\000\000\000\000\000\000\222\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\233\255\000\000\000\000\173\255\000\000\
\000\000\209\255\000\000\202\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\193\255\000\000\250\255\
\000\000\000\000\000\000\000\000\000\000\000\000\044\014\000\000\
\000\000\000\000\154\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\202\255\004\000\202\255\251\255\202\255\000\000\
\000\000\194\254\000\000\000\000\000\000\000\000\009\000\000\000\
\000\000\000\000\000\000\000\000\000\000\202\255\202\255\000\000\
\000\000\000\000\202\255\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\081\001\147\000\000\000\249\255\000\000\000\000\205\000\
\218\255\000\000\000\000\000\000\185\011\084\001\047\001\244\010\
\123\255\130\000\155\255\000\000\165\000\000\000\083\000\000\000\
\112\000\000\000\153\255\175\000"

let yytablesize = 3947
let yytable = "\029\000\
\060\000\056\000\193\000\096\000\051\000\009\000\001\000\057\000\
\010\000\040\000\077\000\057\000\003\000\082\000\096\000\029\001\
\041\000\011\000\012\000\087\000\029\000\029\000\029\000\029\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\035\000\005\000\006\000\134\000\
\008\000\042\000\052\000\226\000\059\000\227\000\144\000\060\000\
\228\000\229\000\011\000\012\000\042\000\036\000\037\000\149\000\
\043\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\048\000\097\000\049\000\
\098\000\085\000\099\000\025\000\030\001\224\000\061\000\100\000\
\086\000\097\000\050\000\098\000\061\000\099\000\054\000\058\000\
\026\000\058\000\100\000\053\000\058\000\058\000\189\000\215\000\
\216\000\075\000\081\000\219\000\062\000\063\000\064\000\130\000\
\065\000\223\000\197\000\078\000\230\000\132\000\145\000\202\000\
\135\000\241\000\242\000\136\000\067\000\068\000\069\000\070\000\
\071\000\231\000\059\000\151\000\199\000\060\000\103\000\104\000\
\105\000\012\000\137\000\138\000\139\000\140\000\002\001\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\157\000\092\000\018\000\018\000\018\000\
\018\000\188\000\194\000\196\000\061\000\214\000\200\000\204\000\
\206\000\016\001\209\000\211\000\237\000\017\001\213\000\020\001\
\065\000\021\001\019\000\019\000\019\000\019\000\044\000\045\000\
\046\000\047\000\062\000\063\000\064\000\212\000\065\000\239\000\
\033\001\034\001\066\000\217\000\218\000\038\001\240\000\015\001\
\245\000\246\000\067\000\068\000\069\000\070\000\071\000\072\000\
\001\001\004\001\005\001\018\000\101\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\008\001\110\000\014\001\
\010\001\012\001\022\001\023\001\251\000\024\001\025\001\026\001\
\019\000\031\001\004\000\122\000\123\000\124\000\125\000\126\000\
\127\000\128\000\012\000\101\000\102\000\103\000\104\000\105\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\066\000\036\001\037\001\039\001\
\031\000\027\000\060\000\032\000\011\000\060\000\036\000\060\000\
\060\000\060\000\038\000\060\000\060\000\060\000\060\000\060\000\
\041\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\055\000\117\000\024\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\054\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\050\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\056\000\056\000\026\000\
\060\000\060\000\060\000\060\000\060\000\060\000\061\000\072\000\
\034\000\061\000\195\000\061\000\061\000\061\000\039\000\061\000\
\061\000\061\000\061\000\061\000\084\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\007\001\
\225\000\040\001\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\028\001\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\000\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\006\001\000\000\000\000\061\000\061\000\061\000\061\000\
\061\000\061\000\065\000\073\000\000\000\065\000\000\000\065\000\
\065\000\065\000\000\000\065\000\065\000\065\000\065\000\065\000\
\000\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\000\000\000\000\000\000\000\000\000\000\065\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\000\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\000\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\065\000\000\000\000\000\000\000\
\065\000\065\000\065\000\065\000\065\000\065\000\066\000\074\000\
\000\000\066\000\000\000\066\000\066\000\066\000\000\000\066\000\
\066\000\066\000\066\000\066\000\000\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\000\000\000\000\000\000\
\000\000\000\000\066\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\000\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\000\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
\066\000\000\000\000\000\000\000\066\000\066\000\066\000\066\000\
\066\000\066\000\000\000\075\000\000\000\000\000\000\000\000\000\
\000\000\072\000\000\000\000\000\072\000\000\000\072\000\072\000\
\072\000\000\000\072\000\072\000\072\000\072\000\072\000\000\000\
\072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
\072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\072\000\
\072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
\072\000\000\000\072\000\072\000\072\000\072\000\072\000\072\000\
\072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
\072\000\072\000\000\000\072\000\072\000\072\000\072\000\072\000\
\072\000\072\000\072\000\072\000\000\000\000\000\000\000\072\000\
\072\000\072\000\072\000\072\000\072\000\073\000\070\000\000\000\
\073\000\000\000\073\000\073\000\073\000\000\000\073\000\073\000\
\073\000\073\000\073\000\000\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\073\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\073\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\073\000\073\000\000\000\073\000\073\000\
\073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\073\000\073\000\073\000\000\000\073\000\
\073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
\000\000\000\000\000\000\073\000\073\000\073\000\073\000\073\000\
\073\000\074\000\071\000\000\000\074\000\000\000\074\000\074\000\
\074\000\000\000\074\000\074\000\074\000\074\000\074\000\000\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\000\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\000\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\000\000\000\000\000\000\074\000\
\074\000\074\000\074\000\074\000\074\000\075\000\069\000\000\000\
\075\000\000\000\075\000\075\000\075\000\000\000\075\000\075\000\
\075\000\075\000\075\000\000\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\000\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\000\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\000\000\000\000\000\000\075\000\075\000\075\000\075\000\075\000\
\075\000\000\000\067\000\000\000\000\000\000\000\000\000\000\000\
\070\000\000\000\000\000\070\000\000\000\070\000\070\000\070\000\
\000\000\070\000\070\000\070\000\070\000\070\000\000\000\070\000\
\070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
\070\000\070\000\070\000\070\000\070\000\070\000\070\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\070\000\070\000\
\070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
\000\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
\000\000\000\000\000\000\000\000\070\000\070\000\070\000\070\000\
\070\000\000\000\070\000\070\000\070\000\070\000\070\000\070\000\
\070\000\070\000\070\000\000\000\000\000\000\000\070\000\070\000\
\070\000\070\000\070\000\070\000\071\000\068\000\000\000\071\000\
\000\000\071\000\071\000\071\000\000\000\071\000\071\000\071\000\
\071\000\071\000\000\000\071\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\071\000\000\000\071\000\071\000\071\000\
\071\000\071\000\071\000\071\000\000\000\000\000\000\000\000\000\
\071\000\071\000\071\000\071\000\071\000\000\000\071\000\071\000\
\071\000\071\000\071\000\071\000\071\000\071\000\071\000\000\000\
\000\000\000\000\071\000\071\000\071\000\071\000\071\000\071\000\
\069\000\076\000\000\000\069\000\000\000\069\000\069\000\069\000\
\000\000\069\000\069\000\069\000\069\000\069\000\000\000\069\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\069\000\069\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
\000\000\069\000\069\000\069\000\069\000\069\000\000\000\000\000\
\000\000\000\000\000\000\000\000\069\000\069\000\069\000\069\000\
\069\000\000\000\069\000\069\000\069\000\069\000\069\000\069\000\
\069\000\069\000\069\000\000\000\000\000\000\000\069\000\069\000\
\069\000\069\000\069\000\069\000\067\000\077\000\000\000\067\000\
\000\000\067\000\067\000\067\000\000\000\067\000\067\000\067\000\
\067\000\067\000\000\000\067\000\067\000\067\000\067\000\067\000\
\067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
\067\000\067\000\067\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\067\000\067\000\067\000\000\000\067\000\067\000\
\067\000\067\000\067\000\067\000\000\000\067\000\067\000\067\000\
\067\000\067\000\000\000\000\000\000\000\000\000\000\000\000\000\
\067\000\067\000\067\000\067\000\067\000\000\000\067\000\067\000\
\067\000\067\000\067\000\067\000\067\000\067\000\067\000\000\000\
\000\000\000\000\067\000\067\000\067\000\067\000\067\000\067\000\
\000\000\078\000\000\000\000\000\000\000\000\000\000\000\068\000\
\000\000\000\000\068\000\000\000\068\000\068\000\068\000\000\000\
\068\000\068\000\068\000\068\000\068\000\000\000\068\000\068\000\
\068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
\068\000\068\000\068\000\068\000\068\000\068\000\000\000\101\000\
\102\000\103\000\104\000\105\000\106\000\107\000\068\000\068\000\
\000\000\068\000\068\000\068\000\068\000\068\000\068\000\000\000\
\068\000\068\000\068\000\068\000\068\000\000\000\000\000\000\000\
\000\000\000\000\000\000\068\000\068\000\068\000\068\000\068\000\
\000\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
\068\000\068\000\000\000\000\000\000\000\068\000\068\000\068\000\
\068\000\068\000\068\000\076\000\079\000\000\000\076\000\000\000\
\076\000\076\000\076\000\000\000\076\000\076\000\076\000\076\000\
\076\000\000\000\076\000\076\000\076\000\076\000\076\000\076\000\
\076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
\076\000\076\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\076\000\000\000\076\000\076\000\076\000\
\076\000\076\000\076\000\000\000\076\000\076\000\076\000\076\000\
\076\000\000\000\000\000\000\000\000\000\000\000\000\000\076\000\
\076\000\076\000\076\000\076\000\000\000\076\000\076\000\076\000\
\076\000\076\000\076\000\076\000\076\000\076\000\000\000\000\000\
\000\000\076\000\076\000\076\000\076\000\076\000\076\000\077\000\
\080\000\000\000\077\000\000\000\077\000\077\000\077\000\000\000\
\077\000\077\000\077\000\077\000\077\000\000\000\077\000\077\000\
\077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
\077\000\077\000\077\000\077\000\077\000\077\000\000\000\101\000\
\102\000\103\000\104\000\105\000\106\000\107\000\000\000\077\000\
\000\000\077\000\077\000\077\000\077\000\077\000\077\000\000\000\
\077\000\077\000\077\000\077\000\077\000\000\000\122\000\123\000\
\124\000\125\000\126\000\127\000\077\000\077\000\077\000\077\000\
\000\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
\077\000\077\000\000\000\000\000\000\000\077\000\077\000\077\000\
\077\000\077\000\077\000\078\000\081\000\000\000\078\000\000\000\
\078\000\078\000\078\000\000\000\078\000\078\000\078\000\078\000\
\078\000\000\000\078\000\078\000\078\000\078\000\078\000\078\000\
\078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
\078\000\078\000\000\000\000\000\000\000\011\000\012\000\000\000\
\000\000\000\000\000\000\078\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\022\000\023\000\024\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\078\000\078\000\078\000\000\000\078\000\078\000\078\000\
\078\000\078\000\078\000\078\000\078\000\078\000\000\000\000\000\
\000\000\078\000\078\000\078\000\078\000\078\000\078\000\000\000\
\082\000\000\000\000\000\000\000\000\000\000\000\079\000\025\000\
\000\000\079\000\000\000\079\000\079\000\079\000\000\000\079\000\
\079\000\079\000\079\000\079\000\026\000\079\000\079\000\079\000\
\079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
\079\000\079\000\079\000\079\000\079\000\000\000\000\000\000\000\
\000\000\012\000\000\000\000\000\000\000\000\000\079\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\079\000\079\000\079\000\000\000\
\079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
\079\000\000\000\000\000\000\000\079\000\079\000\079\000\079\000\
\079\000\079\000\080\000\083\000\000\000\080\000\000\000\080\000\
\080\000\080\000\055\000\080\000\080\000\080\000\080\000\080\000\
\133\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
\080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
\080\000\000\000\101\000\102\000\103\000\104\000\105\000\106\000\
\107\000\108\000\080\000\000\000\110\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\122\000\123\000\124\000\125\000\126\000\127\000\000\000\
\080\000\080\000\080\000\000\000\080\000\080\000\080\000\080\000\
\080\000\080\000\080\000\080\000\080\000\000\000\000\000\000\000\
\080\000\080\000\080\000\080\000\080\000\080\000\081\000\084\000\
\000\000\081\000\000\000\081\000\081\000\081\000\000\000\081\000\
\081\000\081\000\081\000\081\000\000\000\081\000\081\000\081\000\
\081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
\081\000\081\000\081\000\081\000\081\000\000\000\101\000\102\000\
\103\000\104\000\105\000\106\000\107\000\000\000\081\000\000\000\
\110\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\122\000\123\000\124\000\
\125\000\126\000\127\000\000\000\081\000\081\000\081\000\000\000\
\081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
\081\000\000\000\000\000\000\000\081\000\081\000\081\000\081\000\
\081\000\081\000\082\000\085\000\000\000\082\000\000\000\082\000\
\082\000\082\000\000\000\082\000\082\000\082\000\082\000\082\000\
\000\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
\082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
\082\000\000\000\000\000\000\000\000\000\012\000\000\000\000\000\
\000\000\000\000\082\000\013\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\082\000\082\000\082\000\000\000\082\000\082\000\082\000\082\000\
\082\000\082\000\082\000\082\000\082\000\000\000\000\000\000\000\
\082\000\082\000\082\000\082\000\082\000\082\000\000\000\086\000\
\000\000\000\000\000\000\000\000\000\000\083\000\025\000\000\000\
\083\000\000\000\083\000\083\000\083\000\000\000\083\000\083\000\
\083\000\083\000\083\000\038\000\083\000\083\000\083\000\083\000\
\083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
\083\000\083\000\083\000\083\000\000\000\101\000\102\000\103\000\
\104\000\105\000\106\000\107\000\000\000\083\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\124\000\125\000\
\126\000\127\000\000\000\083\000\083\000\083\000\000\000\083\000\
\083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
\000\000\000\000\000\000\083\000\083\000\083\000\083\000\083\000\
\083\000\084\000\087\000\000\000\084\000\000\000\084\000\084\000\
\084\000\000\000\084\000\084\000\084\000\084\000\084\000\000\000\
\084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
\084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\084\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\084\000\
\084\000\084\000\000\000\084\000\084\000\084\000\084\000\084\000\
\084\000\084\000\084\000\084\000\000\000\000\000\000\000\084\000\
\084\000\084\000\084\000\084\000\084\000\085\000\088\000\000\000\
\085\000\000\000\085\000\085\000\085\000\000\000\085\000\085\000\
\085\000\085\000\085\000\000\000\085\000\085\000\085\000\085\000\
\085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
\085\000\085\000\085\000\085\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\085\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\085\000\085\000\085\000\000\000\085\000\
\085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
\000\000\000\000\000\000\085\000\085\000\085\000\085\000\085\000\
\085\000\086\000\028\000\000\000\086\000\000\000\086\000\086\000\
\086\000\000\000\086\000\086\000\086\000\086\000\086\000\000\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
\000\000\086\000\013\000\014\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\024\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\086\000\
\086\000\086\000\000\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\000\000\000\000\000\000\086\000\
\086\000\086\000\086\000\086\000\086\000\000\000\023\000\000\000\
\000\000\000\000\000\000\000\000\087\000\055\000\000\000\087\000\
\000\000\087\000\087\000\087\000\000\000\087\000\087\000\087\000\
\087\000\087\000\148\000\087\000\087\000\087\000\087\000\087\000\
\087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
\087\000\087\000\087\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\087\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\087\000\087\000\087\000\000\000\087\000\087\000\
\087\000\087\000\087\000\087\000\087\000\087\000\087\000\000\000\
\000\000\000\000\087\000\087\000\087\000\087\000\087\000\087\000\
\088\000\022\000\000\000\088\000\000\000\088\000\088\000\088\000\
\000\000\088\000\088\000\088\000\088\000\088\000\000\000\088\000\
\088\000\088\000\088\000\088\000\088\000\088\000\088\000\088\000\
\088\000\088\000\088\000\088\000\088\000\088\000\088\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\088\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\088\000\088\000\
\088\000\000\000\088\000\088\000\088\000\088\000\088\000\088\000\
\088\000\088\000\088\000\000\000\000\000\000\000\088\000\088\000\
\088\000\088\000\088\000\088\000\028\000\029\000\000\000\028\000\
\000\000\028\000\028\000\028\000\000\000\028\000\028\000\028\000\
\028\000\028\000\000\000\000\000\000\000\000\000\000\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\000\000\002\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\028\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\028\000\028\000\028\000\000\000\028\000\000\000\
\000\000\028\000\028\000\000\000\028\000\000\000\000\000\000\000\
\000\000\000\000\028\000\028\000\028\000\028\000\028\000\028\000\
\023\000\000\000\000\000\023\000\000\000\023\000\023\000\023\000\
\000\000\023\000\023\000\023\000\023\000\023\000\000\000\000\000\
\000\000\000\000\000\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\000\000\
\000\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\
\023\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\000\023\000\
\023\000\000\000\023\000\000\000\000\000\023\000\023\000\000\000\
\023\000\000\000\000\000\000\000\000\000\000\000\023\000\023\000\
\023\000\023\000\023\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\022\000\055\000\000\000\022\000\000\000\
\022\000\022\000\022\000\000\000\022\000\022\000\022\000\022\000\
\022\000\201\000\000\000\000\000\000\000\000\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\022\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\022\000\022\000\022\000\000\000\022\000\000\000\000\000\
\022\000\022\000\000\000\022\000\000\000\000\000\000\000\000\000\
\000\000\022\000\022\000\022\000\022\000\022\000\022\000\029\000\
\000\000\000\000\029\000\000\000\029\000\029\000\029\000\000\000\
\029\000\029\000\029\000\029\000\029\000\000\000\000\000\000\000\
\000\000\000\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\002\000\000\000\
\000\000\002\000\000\000\000\000\000\000\000\000\000\000\029\000\
\000\000\000\000\002\000\002\000\000\000\000\000\000\000\000\000\
\000\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\029\000\029\000\029\000\
\000\000\029\000\033\000\000\000\029\000\029\000\033\000\029\000\
\000\000\000\000\000\000\000\000\000\000\029\000\029\000\029\000\
\029\000\029\000\029\000\000\000\000\000\000\000\000\000\033\000\
\033\000\033\000\033\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\057\000\002\000\000\000\000\000\000\000\
\000\000\000\000\000\000\059\000\057\000\000\000\060\000\057\000\
\000\000\002\000\012\000\000\000\000\000\057\000\000\000\000\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\000\000\000\000\000\000\000\000\
\000\000\057\000\000\000\000\000\000\000\061\000\000\000\000\000\
\057\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\057\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\062\000\063\000\064\000\000\000\065\000\
\000\000\000\000\000\000\066\000\094\000\000\000\000\000\000\000\
\000\000\000\000\000\000\067\000\068\000\069\000\070\000\071\000\
\072\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\057\000\000\000\057\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\059\000\057\000\000\000\060\000\000\000\
\000\000\057\000\012\000\000\000\000\000\000\000\000\000\000\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\061\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\057\000\
\000\000\000\000\000\000\062\000\063\000\064\000\000\000\065\000\
\000\000\000\000\000\000\066\000\221\000\000\000\000\000\057\000\
\234\000\000\000\000\000\067\000\068\000\069\000\070\000\071\000\
\072\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\234\000\
\000\000\000\000\073\000\000\000\000\000\000\000\000\000\000\000\
\000\000\057\000\000\000\000\000\000\000\083\000\000\000\000\000\
\000\000\057\000\000\000\000\000\000\000\088\000\089\000\090\000\
\091\000\093\000\095\000\000\000\000\000\000\000\234\000\000\000\
\234\000\000\000\234\000\131\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\234\000\234\000\000\000\146\000\000\000\234\000\000\000\
\000\000\000\000\154\000\156\000\000\000\158\000\159\000\160\000\
\161\000\162\000\163\000\164\000\165\000\166\000\167\000\168\000\
\169\000\170\000\171\000\172\000\173\000\174\000\175\000\176\000\
\177\000\178\000\179\000\180\000\181\000\182\000\183\000\184\000\
\185\000\186\000\187\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\059\000\000\000\
\000\000\060\000\000\000\000\000\000\000\012\000\247\000\000\000\
\000\000\000\000\000\000\013\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\061\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\062\000\063\000\
\064\000\000\000\065\000\000\000\000\000\220\000\066\000\000\000\
\222\000\000\000\000\000\000\000\000\000\233\000\067\000\068\000\
\069\000\070\000\071\000\072\000\000\000\000\000\000\000\000\000\
\000\000\000\000\248\000\250\000\000\000\253\000\095\000\000\000\
\059\000\000\000\000\000\060\000\233\000\003\001\000\000\012\000\
\000\000\000\000\000\000\154\000\000\000\013\000\014\000\015\000\
\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\
\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\061\000\233\000\018\001\233\000\000\000\233\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\001\
\000\000\000\000\000\000\000\000\000\000\032\001\233\000\233\000\
\062\000\063\000\064\000\233\000\065\000\000\000\000\000\000\000\
\066\000\254\000\000\000\000\000\000\000\000\000\000\000\000\000\
\255\000\068\000\069\000\070\000\071\000\072\000\059\000\000\000\
\000\000\060\000\000\000\000\000\000\000\012\000\000\000\000\000\
\000\000\000\000\000\000\013\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\061\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\101\000\102\000\103\000\104\000\105\000\106\000\107\000\108\000\
\109\000\000\000\110\000\000\000\000\000\000\000\062\000\063\000\
\064\000\000\000\065\000\000\000\000\000\000\000\066\000\122\000\
\123\000\124\000\125\000\126\000\127\000\000\000\067\000\068\000\
\069\000\070\000\071\000\072\000\101\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\000\000\110\000\111\000\
\112\000\113\000\114\000\115\000\116\000\000\000\117\000\118\000\
\119\000\120\000\121\000\122\000\123\000\124\000\125\000\126\000\
\127\000\128\000\129\000\000\000\000\000\000\000\101\000\102\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\203\000\
\110\000\111\000\112\000\113\000\114\000\115\000\116\000\000\000\
\117\000\118\000\119\000\120\000\121\000\122\000\123\000\124\000\
\125\000\126\000\127\000\128\000\129\000\000\000\000\000\000\000\
\101\000\102\000\103\000\104\000\105\000\106\000\107\000\108\000\
\109\000\243\000\110\000\111\000\112\000\113\000\114\000\115\000\
\116\000\000\000\117\000\118\000\119\000\120\000\121\000\122\000\
\123\000\124\000\125\000\126\000\127\000\128\000\129\000\000\000\
\000\000\000\000\101\000\102\000\103\000\104\000\105\000\106\000\
\107\000\108\000\109\000\009\001\110\000\111\000\112\000\113\000\
\114\000\115\000\116\000\000\000\117\000\118\000\119\000\120\000\
\121\000\122\000\123\000\124\000\125\000\126\000\127\000\128\000\
\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\207\000\000\000\208\000\101\000\102\000\103\000\
\104\000\105\000\106\000\107\000\108\000\109\000\000\000\110\000\
\111\000\112\000\113\000\114\000\115\000\116\000\000\000\117\000\
\118\000\119\000\120\000\121\000\122\000\123\000\124\000\125\000\
\126\000\127\000\128\000\129\000\000\000\000\000\101\000\102\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\205\000\
\110\000\111\000\112\000\113\000\114\000\115\000\116\000\000\000\
\117\000\118\000\119\000\120\000\121\000\122\000\123\000\124\000\
\125\000\126\000\127\000\128\000\129\000\000\000\101\000\102\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\000\001\
\110\000\111\000\112\000\113\000\114\000\115\000\116\000\000\000\
\117\000\118\000\119\000\120\000\121\000\122\000\123\000\124\000\
\125\000\126\000\127\000\128\000\129\000\101\000\102\000\103\000\
\104\000\105\000\106\000\107\000\108\000\109\000\150\000\110\000\
\111\000\112\000\113\000\114\000\115\000\116\000\000\000\117\000\
\118\000\119\000\120\000\121\000\122\000\123\000\124\000\125\000\
\126\000\127\000\128\000\129\000\101\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\244\000\110\000\111\000\
\112\000\113\000\114\000\115\000\116\000\000\000\117\000\118\000\
\119\000\120\000\121\000\122\000\123\000\124\000\125\000\126\000\
\127\000\128\000\129\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\001\101\000\102\000\103\000\104\000\105\000\106\000\
\107\000\108\000\109\000\000\000\110\000\111\000\112\000\113\000\
\114\000\115\000\116\000\000\000\117\000\118\000\119\000\120\000\
\121\000\122\000\123\000\124\000\125\000\126\000\127\000\128\000\
\129\000\000\000\000\000\000\000\000\000\000\000\000\000\013\001\
\101\000\102\000\103\000\104\000\105\000\106\000\107\000\108\000\
\109\000\000\000\110\000\111\000\112\000\113\000\114\000\115\000\
\116\000\000\000\117\000\118\000\119\000\120\000\121\000\122\000\
\123\000\124\000\125\000\126\000\127\000\128\000\129\000\000\000\
\000\000\000\000\000\000\000\000\000\000\035\001\101\000\102\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\000\000\
\110\000\111\000\112\000\113\000\114\000\115\000\116\000\000\000\
\117\000\118\000\119\000\120\000\121\000\122\000\123\000\124\000\
\125\000\126\000\127\000\128\000\129\000\000\000\000\000\000\000\
\000\000\000\000\147\000\101\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\000\000\110\000\111\000\112\000\
\113\000\114\000\115\000\116\000\000\000\117\000\118\000\119\000\
\120\000\121\000\122\000\123\000\124\000\125\000\126\000\127\000\
\128\000\129\000\000\000\000\000\000\000\000\000\000\000\198\000\
\101\000\102\000\103\000\104\000\105\000\106\000\107\000\108\000\
\109\000\000\000\110\000\111\000\112\000\113\000\114\000\115\000\
\116\000\000\000\117\000\118\000\119\000\120\000\121\000\122\000\
\123\000\124\000\125\000\126\000\127\000\128\000\129\000\000\000\
\000\000\000\000\000\000\000\000\210\000\101\000\102\000\103\000\
\104\000\105\000\106\000\107\000\108\000\109\000\000\000\110\000\
\111\000\112\000\113\000\114\000\115\000\116\000\000\000\117\000\
\118\000\119\000\120\000\121\000\122\000\123\000\124\000\125\000\
\126\000\127\000\128\000\129\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\000\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\000\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000"

let yycheck = "\007\000\
\000\000\040\000\136\000\001\001\006\001\002\001\001\000\070\001\
\005\001\073\001\049\000\074\001\003\001\052\000\001\001\009\001\
\080\001\014\001\015\001\058\000\028\000\029\000\030\000\031\000\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\068\001\085\001\004\001\078\000\
\084\001\050\001\044\001\007\001\008\001\009\001\085\000\011\001\
\012\001\013\001\014\001\015\001\050\001\085\001\085\001\094\000\
\000\000\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\085\001\068\001\085\001\
\070\001\073\001\072\001\072\001\070\001\211\000\042\001\077\001\
\080\001\068\001\068\001\070\001\000\000\072\001\085\001\069\001\
\085\001\071\001\077\001\050\001\074\001\073\001\133\000\199\000\
\200\000\044\001\070\001\203\000\064\001\065\001\066\001\068\001\
\068\001\209\000\145\000\085\001\072\001\069\001\073\001\150\000\
\069\001\217\000\218\000\076\001\080\001\081\001\082\001\083\001\
\084\001\085\001\008\001\085\001\070\001\011\001\035\001\036\001\
\037\001\015\001\017\001\018\001\019\001\020\001\236\000\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\085\001\034\001\017\001\018\001\019\001\
\020\001\085\001\071\001\085\001\042\001\196\000\070\001\069\001\
\071\001\009\001\068\001\068\001\044\001\011\001\070\001\013\001\
\000\000\015\001\017\001\018\001\019\001\020\001\028\000\029\000\
\030\000\031\000\064\001\065\001\066\001\076\001\068\001\071\001\
\030\001\031\001\072\001\070\001\070\001\035\001\071\001\070\001\
\069\001\069\001\080\001\081\001\082\001\083\001\084\001\085\001\
\071\001\071\001\071\001\071\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\074\001\043\001\254\000\
\074\001\074\001\071\001\074\001\228\000\071\001\071\001\010\001\
\071\001\070\001\000\000\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\015\001\033\001\034\001\035\001\036\001\037\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\000\000\071\001\071\001\071\001\
\069\001\085\001\002\001\069\001\071\001\005\001\070\001\007\001\
\008\001\009\001\070\001\011\001\012\001\013\001\014\001\015\001\
\071\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\072\001\071\001\085\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\074\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\063\001\
\064\001\065\001\066\001\074\001\068\001\069\001\070\001\071\001\
\072\001\073\001\074\001\075\001\076\001\074\001\070\001\085\001\
\080\001\081\001\082\001\083\001\084\001\085\001\002\001\000\000\
\008\000\005\001\142\000\007\001\008\001\009\001\011\000\011\001\
\012\001\013\001\014\001\015\001\054\000\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\246\000\
\212\000\039\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\023\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\065\001\066\001\255\255\
\068\001\069\001\070\001\071\001\072\001\073\001\074\001\075\001\
\076\001\243\000\255\255\255\255\080\001\081\001\082\001\083\001\
\084\001\085\001\002\001\000\000\255\255\005\001\255\255\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\255\255\255\255\255\255\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\255\255\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\063\001\
\064\001\065\001\066\001\255\255\068\001\069\001\070\001\071\001\
\072\001\073\001\074\001\075\001\076\001\255\255\255\255\255\255\
\080\001\081\001\082\001\083\001\084\001\085\001\002\001\000\000\
\255\255\005\001\255\255\007\001\008\001\009\001\255\255\011\001\
\012\001\013\001\014\001\015\001\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\255\255\255\255\255\255\
\255\255\255\255\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\255\255\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\065\001\066\001\255\255\
\068\001\069\001\070\001\071\001\072\001\073\001\074\001\075\001\
\076\001\255\255\255\255\255\255\080\001\081\001\082\001\083\001\
\084\001\085\001\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\002\001\255\255\255\255\005\001\255\255\007\001\008\001\
\009\001\255\255\011\001\012\001\013\001\014\001\015\001\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\255\255\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\065\001\066\001\255\255\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\255\255\255\255\255\255\080\001\
\081\001\082\001\083\001\084\001\085\001\002\001\000\000\255\255\
\005\001\255\255\007\001\008\001\009\001\255\255\011\001\012\001\
\013\001\014\001\015\001\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\255\255\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\064\001\065\001\066\001\255\255\068\001\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\076\001\
\255\255\255\255\255\255\080\001\081\001\082\001\083\001\084\001\
\085\001\002\001\000\000\255\255\005\001\255\255\007\001\008\001\
\009\001\255\255\011\001\012\001\013\001\014\001\015\001\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\255\255\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\065\001\066\001\255\255\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\255\255\255\255\255\255\080\001\
\081\001\082\001\083\001\084\001\085\001\002\001\000\000\255\255\
\005\001\255\255\007\001\008\001\009\001\255\255\011\001\012\001\
\013\001\014\001\015\001\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\255\255\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\064\001\065\001\066\001\255\255\068\001\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\076\001\
\255\255\255\255\255\255\080\001\081\001\082\001\083\001\084\001\
\085\001\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\002\001\255\255\255\255\005\001\255\255\007\001\008\001\009\001\
\255\255\011\001\012\001\013\001\014\001\015\001\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\255\255\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\255\255\255\255\255\255\255\255\062\001\063\001\064\001\065\001\
\066\001\255\255\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\255\255\255\255\255\255\080\001\081\001\
\082\001\083\001\084\001\085\001\002\001\000\000\255\255\005\001\
\255\255\007\001\008\001\009\001\255\255\011\001\012\001\013\001\
\014\001\015\001\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\255\255\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\255\255\255\255\255\255\255\255\
\062\001\063\001\064\001\065\001\066\001\255\255\068\001\069\001\
\070\001\071\001\072\001\073\001\074\001\075\001\076\001\255\255\
\255\255\255\255\080\001\081\001\082\001\083\001\084\001\085\001\
\002\001\000\000\255\255\005\001\255\255\007\001\008\001\009\001\
\255\255\011\001\012\001\013\001\014\001\015\001\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\255\255\051\001\052\001\053\001\054\001\055\001\255\255\255\255\
\255\255\255\255\255\255\255\255\062\001\063\001\064\001\065\001\
\066\001\255\255\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\255\255\255\255\255\255\080\001\081\001\
\082\001\083\001\084\001\085\001\002\001\000\000\255\255\005\001\
\255\255\007\001\008\001\009\001\255\255\011\001\012\001\013\001\
\014\001\015\001\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\040\001\041\001\042\001\255\255\044\001\045\001\
\046\001\047\001\048\001\049\001\255\255\051\001\052\001\053\001\
\054\001\055\001\255\255\255\255\255\255\255\255\255\255\255\255\
\062\001\063\001\064\001\065\001\066\001\255\255\068\001\069\001\
\070\001\071\001\072\001\073\001\074\001\075\001\076\001\255\255\
\255\255\255\255\080\001\081\001\082\001\083\001\084\001\085\001\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\002\001\
\255\255\255\255\005\001\255\255\007\001\008\001\009\001\255\255\
\011\001\012\001\013\001\014\001\015\001\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\255\255\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\041\001\042\001\
\255\255\044\001\045\001\046\001\047\001\048\001\049\001\255\255\
\051\001\052\001\053\001\054\001\055\001\255\255\255\255\255\255\
\255\255\255\255\255\255\062\001\063\001\064\001\065\001\066\001\
\255\255\068\001\069\001\070\001\071\001\072\001\073\001\074\001\
\075\001\076\001\255\255\255\255\255\255\080\001\081\001\082\001\
\083\001\084\001\085\001\002\001\000\000\255\255\005\001\255\255\
\007\001\008\001\009\001\255\255\011\001\012\001\013\001\014\001\
\015\001\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\042\001\255\255\044\001\045\001\046\001\
\047\001\048\001\049\001\255\255\051\001\052\001\053\001\054\001\
\055\001\255\255\255\255\255\255\255\255\255\255\255\255\062\001\
\063\001\064\001\065\001\066\001\255\255\068\001\069\001\070\001\
\071\001\072\001\073\001\074\001\075\001\076\001\255\255\255\255\
\255\255\080\001\081\001\082\001\083\001\084\001\085\001\002\001\
\000\000\255\255\005\001\255\255\007\001\008\001\009\001\255\255\
\011\001\012\001\013\001\014\001\015\001\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\255\255\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\255\255\042\001\
\255\255\044\001\045\001\046\001\047\001\048\001\049\001\255\255\
\051\001\052\001\053\001\054\001\055\001\255\255\056\001\057\001\
\058\001\059\001\060\001\061\001\063\001\064\001\065\001\066\001\
\255\255\068\001\069\001\070\001\071\001\072\001\073\001\074\001\
\075\001\076\001\255\255\255\255\255\255\080\001\081\001\082\001\
\083\001\084\001\085\001\002\001\000\000\255\255\005\001\255\255\
\007\001\008\001\009\001\255\255\011\001\012\001\013\001\014\001\
\015\001\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\255\255\255\255\255\255\014\001\015\001\255\255\
\255\255\255\255\255\255\042\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\064\001\065\001\066\001\255\255\068\001\069\001\070\001\
\071\001\072\001\073\001\074\001\075\001\076\001\255\255\255\255\
\255\255\080\001\081\001\082\001\083\001\084\001\085\001\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\002\001\072\001\
\255\255\005\001\255\255\007\001\008\001\009\001\255\255\011\001\
\012\001\013\001\014\001\015\001\085\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\255\255\255\255\255\255\
\255\255\015\001\255\255\255\255\255\255\255\255\042\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\064\001\065\001\066\001\255\255\
\068\001\069\001\070\001\071\001\072\001\073\001\074\001\075\001\
\076\001\255\255\255\255\255\255\080\001\081\001\082\001\083\001\
\084\001\085\001\002\001\000\000\255\255\005\001\255\255\007\001\
\008\001\009\001\072\001\011\001\012\001\013\001\014\001\015\001\
\078\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\042\001\255\255\043\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\056\001\057\001\058\001\059\001\060\001\061\001\255\255\
\064\001\065\001\066\001\255\255\068\001\069\001\070\001\071\001\
\072\001\073\001\074\001\075\001\076\001\255\255\255\255\255\255\
\080\001\081\001\082\001\083\001\084\001\085\001\002\001\000\000\
\255\255\005\001\255\255\007\001\008\001\009\001\255\255\011\001\
\012\001\013\001\014\001\015\001\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\255\255\042\001\255\255\
\043\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\056\001\057\001\058\001\
\059\001\060\001\061\001\255\255\064\001\065\001\066\001\255\255\
\068\001\069\001\070\001\071\001\072\001\073\001\074\001\075\001\
\076\001\255\255\255\255\255\255\080\001\081\001\082\001\083\001\
\084\001\085\001\002\001\000\000\255\255\005\001\255\255\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\255\255\255\255\255\255\255\255\015\001\255\255\255\255\
\255\255\255\255\042\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\064\001\065\001\066\001\255\255\068\001\069\001\070\001\071\001\
\072\001\073\001\074\001\075\001\076\001\255\255\255\255\255\255\
\080\001\081\001\082\001\083\001\084\001\085\001\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\002\001\072\001\255\255\
\005\001\255\255\007\001\008\001\009\001\255\255\011\001\012\001\
\013\001\014\001\015\001\085\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\255\255\042\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\058\001\059\001\
\060\001\061\001\255\255\064\001\065\001\066\001\255\255\068\001\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\076\001\
\255\255\255\255\255\255\080\001\081\001\082\001\083\001\084\001\
\085\001\002\001\000\000\255\255\005\001\255\255\007\001\008\001\
\009\001\255\255\011\001\012\001\013\001\014\001\015\001\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\042\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\064\001\
\065\001\066\001\255\255\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\255\255\255\255\255\255\080\001\
\081\001\082\001\083\001\084\001\085\001\002\001\000\000\255\255\
\005\001\255\255\007\001\008\001\009\001\255\255\011\001\012\001\
\013\001\014\001\015\001\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\042\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\064\001\065\001\066\001\255\255\068\001\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\076\001\
\255\255\255\255\255\255\080\001\081\001\082\001\083\001\084\001\
\085\001\002\001\000\000\255\255\005\001\255\255\007\001\008\001\
\009\001\255\255\011\001\012\001\013\001\014\001\015\001\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\255\255\255\255\255\255\255\255\015\001\255\255\255\255\255\255\
\255\255\042\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\064\001\
\065\001\066\001\255\255\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\255\255\255\255\255\255\080\001\
\081\001\082\001\083\001\084\001\085\001\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\002\001\072\001\255\255\005\001\
\255\255\007\001\008\001\009\001\255\255\011\001\012\001\013\001\
\014\001\015\001\085\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\042\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\064\001\065\001\066\001\255\255\068\001\069\001\
\070\001\071\001\072\001\073\001\074\001\075\001\076\001\255\255\
\255\255\255\255\080\001\081\001\082\001\083\001\084\001\085\001\
\002\001\000\000\255\255\005\001\255\255\007\001\008\001\009\001\
\255\255\011\001\012\001\013\001\014\001\015\001\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\042\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\064\001\065\001\
\066\001\255\255\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\255\255\255\255\255\255\080\001\081\001\
\082\001\083\001\084\001\085\001\002\001\000\000\255\255\005\001\
\255\255\007\001\008\001\009\001\255\255\011\001\012\001\013\001\
\014\001\015\001\255\255\255\255\255\255\255\255\255\255\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\042\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\064\001\065\001\066\001\255\255\068\001\255\255\
\255\255\071\001\072\001\255\255\074\001\255\255\255\255\255\255\
\255\255\255\255\080\001\081\001\082\001\083\001\084\001\085\001\
\002\001\255\255\255\255\005\001\255\255\007\001\008\001\009\001\
\255\255\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\255\255\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\255\255\
\255\255\255\255\255\255\015\001\255\255\255\255\255\255\255\255\
\042\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\064\001\065\001\
\066\001\255\255\068\001\255\255\255\255\071\001\072\001\255\255\
\074\001\255\255\255\255\255\255\255\255\255\255\080\001\081\001\
\082\001\083\001\084\001\085\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\002\001\072\001\255\255\005\001\255\255\
\007\001\008\001\009\001\255\255\011\001\012\001\013\001\014\001\
\015\001\085\001\255\255\255\255\255\255\255\255\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\042\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\064\001\065\001\066\001\255\255\068\001\255\255\255\255\
\071\001\072\001\255\255\074\001\255\255\255\255\255\255\255\255\
\255\255\080\001\081\001\082\001\083\001\084\001\085\001\002\001\
\255\255\255\255\005\001\255\255\007\001\008\001\009\001\255\255\
\011\001\012\001\013\001\014\001\015\001\255\255\255\255\255\255\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\002\001\255\255\
\255\255\005\001\255\255\255\255\255\255\255\255\255\255\042\001\
\255\255\255\255\014\001\015\001\255\255\255\255\255\255\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\064\001\065\001\066\001\
\255\255\068\001\007\000\255\255\071\001\072\001\011\000\074\001\
\255\255\255\255\255\255\255\255\255\255\080\001\081\001\082\001\
\083\001\084\001\085\001\255\255\255\255\255\255\255\255\028\000\
\029\000\030\000\031\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\040\000\072\001\255\255\255\255\255\255\
\255\255\255\255\255\255\008\001\049\000\255\255\011\001\052\000\
\255\255\085\001\015\001\255\255\255\255\058\000\255\255\255\255\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\255\255\255\255\255\255\
\255\255\078\000\255\255\255\255\255\255\042\001\255\255\255\255\
\085\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\094\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\064\001\065\001\066\001\255\255\068\001\
\255\255\255\255\255\255\072\001\073\001\255\255\255\255\255\255\
\255\255\255\255\255\255\080\001\081\001\082\001\083\001\084\001\
\085\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\133\000\255\255\135\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\008\001\145\000\255\255\011\001\255\255\
\255\255\150\000\015\001\255\255\255\255\255\255\255\255\255\255\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\042\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\196\000\
\255\255\255\255\255\255\064\001\065\001\066\001\255\255\068\001\
\255\255\255\255\255\255\072\001\073\001\255\255\255\255\212\000\
\213\000\255\255\255\255\080\001\081\001\082\001\083\001\084\001\
\085\001\255\255\255\255\255\255\255\255\255\255\255\255\228\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\236\000\
\255\255\255\255\042\000\255\255\255\255\255\255\255\255\255\255\
\255\255\246\000\255\255\255\255\255\255\053\000\255\255\255\255\
\255\255\254\000\255\255\255\255\255\255\061\000\062\000\063\000\
\064\000\065\000\066\000\255\255\255\255\255\255\011\001\255\255\
\013\001\255\255\015\001\075\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\030\001\031\001\255\255\092\000\255\255\035\001\255\255\
\255\255\255\255\098\000\099\000\255\255\101\000\102\000\103\000\
\104\000\105\000\106\000\107\000\108\000\109\000\110\000\111\000\
\112\000\113\000\114\000\115\000\116\000\117\000\118\000\119\000\
\120\000\121\000\122\000\123\000\124\000\125\000\126\000\127\000\
\128\000\129\000\130\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\008\001\255\255\
\255\255\011\001\255\255\255\255\255\255\015\001\016\001\255\255\
\255\255\255\255\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\042\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\064\001\065\001\
\066\001\255\255\068\001\255\255\255\255\205\000\072\001\255\255\
\208\000\255\255\255\255\255\255\255\255\213\000\080\001\081\001\
\082\001\083\001\084\001\085\001\255\255\255\255\255\255\255\255\
\255\255\255\255\226\000\227\000\255\255\229\000\230\000\255\255\
\008\001\255\255\255\255\011\001\236\000\237\000\255\255\015\001\
\255\255\255\255\255\255\243\000\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\042\001\011\001\012\001\013\001\255\255\015\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\023\001\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\064\001\065\001\066\001\035\001\068\001\255\255\255\255\255\255\
\072\001\073\001\255\255\255\255\255\255\255\255\255\255\255\255\
\080\001\081\001\082\001\083\001\084\001\085\001\008\001\255\255\
\255\255\011\001\255\255\255\255\255\255\015\001\255\255\255\255\
\255\255\255\255\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\042\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\255\255\043\001\255\255\255\255\255\255\064\001\065\001\
\066\001\255\255\068\001\255\255\255\255\255\255\072\001\056\001\
\057\001\058\001\059\001\060\001\061\001\255\255\080\001\081\001\
\082\001\083\001\084\001\085\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\255\255\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\255\255\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\255\255\255\255\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\076\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\255\255\255\255\255\255\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\076\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\255\255\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\255\255\
\255\255\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\076\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\255\255\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\073\001\255\255\075\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\255\255\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\255\255\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\075\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\074\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\073\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\255\255\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\073\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\255\255\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\255\255\255\255\255\255\255\255\255\255\
\255\255\070\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\255\255\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\255\255\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\255\255\255\255\255\255\255\255\255\255\255\255\070\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\255\255\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\255\255\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\255\255\
\255\255\255\255\255\255\255\255\255\255\070\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\255\255\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\255\255\255\255\255\255\
\255\255\255\255\069\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\255\255\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\061\001\
\062\001\063\001\255\255\255\255\255\255\255\255\255\255\069\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\255\255\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\255\255\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\255\255\
\255\255\255\255\255\255\255\255\069\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\255\255\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\255\255\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\255\255\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001"

let yynames_const = "\
  DOUBLECOLON\000\
  EOF\000\
  FUNC\000\
  PACKAGE\000\
  IMPORT\000\
  TYPE\000\
  STRUCT\000\
  RETURN\000\
  BREAK\000\
  IF\000\
  ELSE\000\
  CONTINUE\000\
  FOR\000\
  WHILE\000\
  CONST\000\
  ERROR\000\
  NULL\000\
  FINAL\000\
  MUT\000\
  LATE\000\
  PRIVATE\000\
  BOOL\000\
  STRING\000\
  U8\000\
  U16\000\
  U32\000\
  U64\000\
  I8\000\
  I16\000\
  I32\000\
  I64\000\
  F32\000\
  F64\000\
  PLUS\000\
  MINUS\000\
  DIV\000\
  MULT\000\
  MOD\000\
  LSHIFT\000\
  RSHIFT\000\
  BITXOR\000\
  BITOR\000\
  BITNOT\000\
  BITAND\000\
  ASSIGN\000\
  PLUS_ASSIGN\000\
  MINUS_ASSIGN\000\
  TIMES_ASSIGN\000\
  DIV_ASSIGN\000\
  MOD_ASSIGN\000\
  DECL_ASSIGN\000\
  LSHIFT_ASSIGN\000\
  RSHIFT_ASSIGN\000\
  BITAND_ASSIGN\000\
  BITXOR_ASSIGN\000\
  BITOR_ASSIGN\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LE\000\
  GT\000\
  GE\000\
  AND\000\
  OR\000\
  NOT\000\
  INC\000\
  DEC\000\
  NEG\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  SEMICOLON\000\
  COLON\000\
  COMMA\000\
  DOT\000\
  TRIPLEDOT\000\
  QUESTION\000\
  "

let yynames_block = "\
  INT_LIT\000\
  BOOL_LIT\000\
  CHAR_LIT\000\
  FLOAT_LIT\000\
  STRING_LIT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'import_decls) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'all_decls) in
    Obj.repr(
# 53 "parser.mly"
  (
    let (tdecls, gvars, funcs, smeths) = _4 in
    { package_name      = _2;
      imports           = _3;
      type_declarations = tdecls;
      global_vars       = gvars;
      functions         = funcs;
      struct_functions  = smeths;
    }
  )
# 1481 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
                                   ( []       )
# 1487 "parser.ml"
               : 'import_decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'import_decls) in
    Obj.repr(
# 69 "parser.mly"
                                   ( _2 :: _3 )
# 1495 "parser.ml"
               : 'import_decls))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
                               ( ([], [], [], []) )
# 1501 "parser.ml"
               : 'all_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'all_decls) in
    Obj.repr(
# 75 "parser.mly"
                               ( let (ts, vs, fs, ms) = _2 in (_1::ts,      vs,      fs,      ms) )
# 1509 "parser.ml"
               : 'all_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'all_decls) in
    Obj.repr(
# 76 "parser.mly"
                               ( let (ts, vs, fs, ms) = _2 in (     ts, _1::vs,      fs,      ms) )
# 1517 "parser.ml"
               : 'all_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'func_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'all_decls) in
    Obj.repr(
# 77 "parser.mly"
                               ( let (ts, vs, fs, ms) = _2 in (     ts,      vs, _1::fs,      ms) )
# 1525 "parser.ml"
               : 'all_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'struct_func_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'all_decls) in
    Obj.repr(
# 78 "parser.mly"
                               ( let (ts, vs, fs, ms) = _2 in (     ts,      vs,      fs, _1::ms) )
# 1533 "parser.ml"
               : 'all_decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    Obj.repr(
# 84 "parser.mly"
                                               ( TypeStruct(_2, _5) )
# 1541 "parser.ml"
               : 'type_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 85 "parser.mly"
                                               ( TypeAlias(_2, _4)  )
# 1549 "parser.ml"
               : 'type_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
                         ( []        )
# 1555 "parser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'field_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field_list) in
    Obj.repr(
# 89 "parser.mly"
                         ( _1 :: _2 )
# 1563 "parser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'modifier) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'opt_default) in
    Obj.repr(
# 93 "parser.mly"
    ( { name =          _2;
        field_type =    _3;
        modifier =      _1;
        default_value = _4; }
    )
# 1577 "parser.ml"
               : 'field_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "parser.mly"
            ( Private )
# 1583 "parser.ml"
               : 'modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
            ( Mutable )
# 1589 "parser.ml"
               : 'modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "parser.mly"
            ( Final   )
# 1595 "parser.ml"
               : 'modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
            ( Late    )
# 1601 "parser.ml"
               : 'modifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "parser.mly"
                  ( None     )
# 1607 "parser.ml"
               : 'opt_default))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                  ( Some _2 )
# 1614 "parser.ml"
               : 'opt_default))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'type_expr_w_structs) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'opt_assign) in
    Obj.repr(
# 114 "parser.mly"
  ( StrictType { 
    is_const =         true;
    name =             _3;
    var_type =         _2;
    initializer_expr = _4; })
# 1627 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_expr_w_structs) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_assign) in
    Obj.repr(
# 121 "parser.mly"
  ( StrictType { 
    is_const =         false;
    name =             _2;
    var_type =         _1;
    initializer_expr = _3; })
# 1640 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
  ( InferType { 
    is_const =         true;
    name =             _2;
    var_type =         None; 
    initializer_expr = _4; })
# 1652 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
  ( InferType { 
    is_const =         false;
    name =             _1;
    var_type =         None;
    initializer_expr = _3; })
# 1664 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primitive_type) in
    Obj.repr(
# 143 "parser.mly"
                                     ( Primitive(_1)  )
# 1671 "parser.ml"
               : 'type_expr_w_structs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 144 "parser.mly"
                                        ( Array(_4, _2)  )
# 1679 "parser.ml"
               : 'type_expr_w_structs))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 145 "parser.mly"
                                     ( Slice(_3)      )
# 1686 "parser.ml"
               : 'type_expr_w_structs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 146 "parser.mly"
                                     ( TypeName(_1)   )
# 1693 "parser.ml"
               : 'type_expr_w_structs))
; (fun __caml_parser_env ->
    Obj.repr(
# 149 "parser.mly"
                  ( None )
# 1699 "parser.ml"
               : 'opt_assign))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 150 "parser.mly"
                  ( Some _2 )
# 1706 "parser.ml"
               : 'opt_assign))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'params) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'return_types) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 156 "parser.mly"
  ( { name =         _2;
      params =       _4;
      return_types = _6;
      body =         _8; })
# 1719 "parser.ml"
               : 'func_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 162 "parser.mly"
                       ( []     )
# 1725 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 163 "parser.mly"
                       ( [_1]   )
# 1732 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'params) in
    Obj.repr(
# 164 "parser.mly"
                       ( _1::_3 )
# 1740 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 167 "parser.mly"
                    ( { 
    name =        _1;
    param_type =  _2;
    is_variadic = false; })
# 1751 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 172 "parser.mly"
                              ( {
    name =        _1;
    param_type =  _3;
    is_variadic = true; })
# 1762 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    Obj.repr(
# 178 "parser.mly"
                   ( [] )
# 1768 "parser.ml"
               : 'return_types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr_list) in
    Obj.repr(
# 179 "parser.mly"
                   ( _1 )
# 1775 "parser.ml"
               : 'return_types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 182 "parser.mly"
                                   ( [_1]     )
# 1782 "parser.ml"
               : 'type_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr_list) in
    Obj.repr(
# 183 "parser.mly"
                                   ( _1 :: _3 )
# 1790 "parser.ml"
               : 'type_expr_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 9 : 'type_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 5 : 'params) in
    let _10 = (Parsing.peek_val __caml_parser_env 3 : 'return_types) in
    let _12 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 189 "parser.mly"
  ({
  name =         _6;
  struct_name =  _3;
  params =      _8;
  return_types = _10;
  body =         _12 })
# 1807 "parser.ml"
               : 'struct_func_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 199 "parser.mly"
                            ( []     )
# 1813 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmts) in
    Obj.repr(
# 200 "parser.mly"
                  ( _1 :: _2 )
# 1821 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 203 "parser.mly"
                                                                           ( Expr(_1)                )
# 1828 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_decl) in
    Obj.repr(
# 204 "parser.mly"
                                                                           ( VarDecl(_1)             )
# 1835 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmts) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'else_block) in
    Obj.repr(
# 205 "parser.mly"
                                                                           ( IfStmt(_2, _4, _6)      )
# 1844 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'opt_stmt) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'opt_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'opt_expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 206 "parser.mly"
                                                                           ( ForStmt(_2, _4, _6, _8) )
# 1854 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 207 "parser.mly"
                                                                           ( WhileStmt(_2, _4)       )
# 1862 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_expr_list) in
    Obj.repr(
# 208 "parser.mly"
                                                                           ( Return(_2)              )
# 1869 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 209 "parser.mly"
                                                                           ( Return([])              )
# 1875 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 212 "parser.mly"
                         ( [_1]   )
# 1882 "parser.ml"
               : 'opt_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 213 "parser.mly"
                         ( _1::_3 )
# 1890 "parser.ml"
               : 'opt_expr_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 216 "parser.mly"
                                                ( _3                    )
# 1897 "parser.ml"
               : 'else_block))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmts) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'else_block) in
    Obj.repr(
# 217 "parser.mly"
                                                ( [IfStmt (_3, _5, _7)] )
# 1906 "parser.ml"
               : 'else_block))
; (fun __caml_parser_env ->
    Obj.repr(
# 220 "parser.mly"
                  ( None                )
# 1912 "parser.ml"
               : 'opt_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_decl) in
    Obj.repr(
# 221 "parser.mly"
                  ( Some (VarDecl(_1))  )
# 1919 "parser.ml"
               : 'opt_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 224 "parser.mly"
                  ( None    )
# 1925 "parser.ml"
               : 'opt_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 225 "parser.mly"
                  ( Some _1 )
# 1932 "parser.ml"
               : 'opt_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 228 "parser.mly"
                         ( [_1]     )
# 1939 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 229 "parser.mly"
                         ( _1 :: _3 )
# 1947 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 232 "parser.mly"
                           ( Binop(_1, Plus, _3)   )
# 1955 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 233 "parser.mly"
                           ( Binop(_1, Minus, _3)  )
# 1963 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 234 "parser.mly"
                           ( Binop(_1, Mult, _3)   )
# 1971 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 235 "parser.mly"
                           ( Binop(_1, Div, _3)    )
# 1979 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 236 "parser.mly"
                           ( Binop(_1, Mod, _3)    )
# 1987 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 237 "parser.mly"
                           ( Binop(_1, Lshift, _3) )
# 1995 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 238 "parser.mly"
                           ( Binop(_1, Rshift, _3) )
# 2003 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 239 "parser.mly"
                           ( Binop(_1, Bitxor, _3) )
# 2011 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 240 "parser.mly"
                           ( Binop(_1, Bitor, _3)  )
# 2019 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 241 "parser.mly"
                           ( Binop(_1, Bitand, _3) )
# 2027 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 242 "parser.mly"
                           ( Binop(_1, Eq, _3)     )
# 2035 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 243 "parser.mly"
                           ( Binop(_1, Neq, _3)    )
# 2043 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 244 "parser.mly"
                           ( Binop(_1, Lt, _3)     )
# 2051 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 245 "parser.mly"
                           ( Binop(_1, Le, _3)     )
# 2059 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 246 "parser.mly"
                           ( Binop(_1, Gt, _3)     )
# 2067 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 247 "parser.mly"
                           ( Binop(_1, Ge, _3)     )
# 2075 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 248 "parser.mly"
                           ( Binop(_1, And, _3)    )
# 2083 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 249 "parser.mly"
                           ( Binop(_1, Or, _3)     )
# 2091 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 251 "parser.mly"
                           ( Assignment(_1, RegAssign, _3)    )
# 2099 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 252 "parser.mly"
                           ( Assignment(_1, PlusAssign, _3)   )
# 2107 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 253 "parser.mly"
                           ( Assignment(_1, MinusAssign, _3)  )
# 2115 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 254 "parser.mly"
                           ( Assignment(_1, TimesAssign, _3)  )
# 2123 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 255 "parser.mly"
                           ( Assignment(_1, DivAssign, _3)    )
# 2131 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 256 "parser.mly"
                           ( Assignment(_1, ModAssign, _3)    )
# 2139 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 257 "parser.mly"
                           ( Assignment(_1, LshiftAssign, _3) )
# 2147 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 258 "parser.mly"
                           ( Assignment(_1, RshiftAssign, _3) )
# 2155 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 259 "parser.mly"
                           ( Assignment(_1, BitandAssign, _3) )
# 2163 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 260 "parser.mly"
                           ( Assignment(_1, BitxorAssign, _3) )
# 2171 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 261 "parser.mly"
                           ( Assignment(_1, BitorAssign, _3)  )
# 2179 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 263 "parser.mly"
                           ( Unaop(Bitnot, _2) )
# 2186 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 264 "parser.mly"
                           ( Unaop(Not, _2)    )
# 2193 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 265 "parser.mly"
                           ( Unaop(Inc, _2)    )
# 2200 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 266 "parser.mly"
                           ( Unaop(Dec, _2)    )
# 2207 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 267 "parser.mly"
                           ( Unaop(Neg, _3)    )
# 2214 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 269 "parser.mly"
                                           ( FieldAccess(Identifier(_1), Identifier(_3))    )
# 2222 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 270 "parser.mly"
                                           ( IndexAccess(Identifier(_1), _3)                )
# 2230 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 271 "parser.mly"
                                           ( SliceExpr(Identifier(_1), _3, Some _5)         )
# 2239 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 272 "parser.mly"
                                           ( SliceExpr(Identifier(_1), _3, None)            )
# 2247 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 273 "parser.mly"
                                           ( FunctionCall(_1, _3)               )
# 2255 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 274 "parser.mly"
                                           ( MethodCall(Identifier(_1), Identifier(_3), _5) )
# 2264 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'primitive_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 275 "parser.mly"
                                           ( Cast(Primitive(_1), _3)                        )
# 2272 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'type_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 277 "parser.mly"
                                                           ( ArrayLit(_2, _4, _6)           )
# 2281 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 278 "parser.mly"
                                                           ( ArrayLit(_2, TypeName(_4), _6) )
# 2290 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'field_expr_list) in
    Obj.repr(
# 279 "parser.mly"
                                                           ( StructLit(Identifier(_1), _3)    )
# 2298 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'type_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 280 "parser.mly"
                                                           ( SliceLit(_3, _5)               )
# 2306 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 281 "parser.mly"
                                                           ( SliceLit(TypeName(_3), _5)     )
# 2314 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 283 "parser.mly"
                                         ( SubExpr(_2)   )
# 2321 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 284 "parser.mly"
                                         ( IntLit(_1)    )
# 2328 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 285 "parser.mly"
                                         ( BoolLit(_1)   )
# 2335 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 286 "parser.mly"
                                         ( CharLit(_1)   )
# 2342 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 287 "parser.mly"
                                         ( FloatLit(_1)  )
# 2349 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 288 "parser.mly"
                                         ( StringLit(_1) )
# 2356 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 289 "parser.mly"
                                         ( Break         )
# 2362 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 290 "parser.mly"
                                         ( Continue      )
# 2368 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primitive_type) in
    Obj.repr(
# 293 "parser.mly"
                                     ( Primitive(_1)  )
# 2375 "parser.ml"
               : 'type_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 294 "parser.mly"
                                        ( Array(_4, _2)  )
# 2383 "parser.ml"
               : 'type_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 295 "parser.mly"
                                     ( Slice(_3)      )
# 2390 "parser.ml"
               : 'type_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 298 "parser.mly"
                                            ( [(_1, _3)]     )
# 2398 "parser.ml"
               : 'field_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'field_expr_list) in
    Obj.repr(
# 299 "parser.mly"
                                            ( (_1, _3) :: _5 )
# 2407 "parser.ml"
               : 'field_expr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 302 "parser.mly"
                           ( Bool   )
# 2413 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 303 "parser.mly"
                           ( String )
# 2419 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 304 "parser.mly"
                           ( U8     )
# 2425 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 305 "parser.mly"
                           ( U16    )
# 2431 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 306 "parser.mly"
                           ( U32    )
# 2437 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 307 "parser.mly"
                           ( U64    )
# 2443 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 308 "parser.mly"
                           ( I8     )
# 2449 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 309 "parser.mly"
                           ( I16    )
# 2455 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 310 "parser.mly"
                           ( I32    )
# 2461 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 311 "parser.mly"
                           ( I64    )
# 2467 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 312 "parser.mly"
                           ( F32    )
# 2473 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 313 "parser.mly"
                           ( F64    )
# 2479 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 314 "parser.mly"
                           ( Error  )
# 2485 "parser.ml"
               : 'primitive_type))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
;;
