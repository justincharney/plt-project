type token =
  | PACKAGE
  | IMPORT
  | FUNC
  | TYPE
  | STRUCT
  | RETURN
  | BREAK
  | IF
  | ELSE
  | CONTINUE
  | FOR
  | WHILE
  | CONST
  | MAKE
  | FINAL
  | MUT
  | LATE
  | PRIVATE
  | ERROR
  | TRUE
  | FALSE
  | NULL
  | BOOL
  | STRING
  | U8
  | U16
  | U32
  | U64
  | I8
  | I16
  | I32
  | I64
  | F16
  | F32
  | PLUS
  | MINUS
  | MULT
  | DIV
  | MOD
  | LSHIFT
  | RSHIFT
  | BITAND
  | BITXOR
  | BITOR
  | BITNOT
  | AND
  | OR
  | NOT
  | ASSIGN
  | DECL_ASSIGN
  | PLUS_ASSIGN
  | MINUS_ASSIGN
  | TIMES_ASSIGN
  | DIV_ASSIGN
  | MOD_ASSIGN
  | LSHIFT_ASSIGN
  | RSHIFT_ASSIGN
  | BITAND_ASSIGN
  | BITXOR_ASSIGN
  | BITOR_ASSIGN
  | EQ
  | NEQ
  | LT
  | LE
  | GT
  | GE
  | INC
  | DEC
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | SEMICOLON
  | COLON
  | COMMA
  | DOT
  | IDENT of (string)
  | TYPE_NAME of (string)
  | INT_LIT of (int)
  | FLOAT_LIT of (float)
  | STRING_LIT of (string)
  | CHAR_LIT of (char)
  | BOOL_LIT of (bool)
  | EOF
  | UPLUS
  | UMINUS
  | IFX

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
open Ast
# 97 "parser.ml"
let yytransl_const = [|
  257 (* PACKAGE *);
  258 (* IMPORT *);
  259 (* FUNC *);
  260 (* TYPE *);
  261 (* STRUCT *);
  262 (* RETURN *);
  263 (* BREAK *);
  264 (* IF *);
  265 (* ELSE *);
  266 (* CONTINUE *);
  267 (* FOR *);
  268 (* WHILE *);
  269 (* CONST *);
  270 (* MAKE *);
  271 (* FINAL *);
  272 (* MUT *);
  273 (* LATE *);
  274 (* PRIVATE *);
  275 (* ERROR *);
  276 (* TRUE *);
  277 (* FALSE *);
  278 (* NULL *);
  279 (* BOOL *);
  280 (* STRING *);
  281 (* U8 *);
  282 (* U16 *);
  283 (* U32 *);
  284 (* U64 *);
  285 (* I8 *);
  286 (* I16 *);
  287 (* I32 *);
  288 (* I64 *);
  289 (* F16 *);
  290 (* F32 *);
  291 (* PLUS *);
  292 (* MINUS *);
  293 (* MULT *);
  294 (* DIV *);
  295 (* MOD *);
  296 (* LSHIFT *);
  297 (* RSHIFT *);
  298 (* BITAND *);
  299 (* BITXOR *);
  300 (* BITOR *);
  301 (* BITNOT *);
  302 (* AND *);
  303 (* OR *);
  304 (* NOT *);
  305 (* ASSIGN *);
  306 (* DECL_ASSIGN *);
  307 (* PLUS_ASSIGN *);
  308 (* MINUS_ASSIGN *);
  309 (* TIMES_ASSIGN *);
  310 (* DIV_ASSIGN *);
  311 (* MOD_ASSIGN *);
  312 (* LSHIFT_ASSIGN *);
  313 (* RSHIFT_ASSIGN *);
  314 (* BITAND_ASSIGN *);
  315 (* BITXOR_ASSIGN *);
  316 (* BITOR_ASSIGN *);
  317 (* EQ *);
  318 (* NEQ *);
  319 (* LT *);
  320 (* LE *);
  321 (* GT *);
  322 (* GE *);
  323 (* INC *);
  324 (* DEC *);
  325 (* LPAREN *);
  326 (* RPAREN *);
  327 (* LBRACE *);
  328 (* RBRACE *);
  329 (* LBRACKET *);
  330 (* RBRACKET *);
  331 (* SEMICOLON *);
  332 (* COLON *);
  333 (* COMMA *);
  334 (* DOT *);
    0 (* EOF *);
  342 (* UPLUS *);
  343 (* UMINUS *);
  344 (* IFX *);
    0|]

let yytransl_block = [|
  335 (* IDENT *);
  336 (* TYPE_NAME *);
  337 (* INT_LIT *);
  338 (* FLOAT_LIT *);
  339 (* STRING_LIT *);
  340 (* CHAR_LIT *);
  341 (* BOOL_LIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\004\000\003\000\003\000\003\000\005\000\
\005\000\005\000\005\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\011\000\011\000\011\000\011\000\012\000\012\000\012\000\012\000\
\012\000\013\000\014\000\014\000\016\000\016\000\006\000\006\000\
\007\000\007\000\017\000\017\000\018\000\019\000\019\000\019\000\
\020\000\020\000\020\000\021\000\021\000\022\000\008\000\009\000\
\023\000\024\000\024\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\028\000\028\000\029\000\
\029\000\027\000\030\000\030\000\026\000\026\000\031\000\031\000\
\031\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\033\000\033\000\034\000\
\034\000\032\000\032\000\032\000\032\000\032\000\032\000\000\000"

let yylen = "\002\000\
\006\000\000\000\002\000\003\000\000\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\004\000\003\000\000\000\001\000\001\000\001\000\
\001\000\004\000\000\000\002\000\000\000\003\000\006\000\004\000\
\005\000\003\000\000\000\002\000\002\000\000\000\001\000\003\000\
\000\000\001\000\003\000\001\000\003\000\001\000\007\000\011\000\
\003\000\000\000\002\000\002\000\002\000\001\000\003\000\005\000\
\003\000\003\000\003\000\002\000\002\000\000\000\001\000\001\000\
\003\000\005\000\000\000\001\000\005\000\003\000\001\000\003\000\
\004\000\001\000\001\000\004\000\003\000\003\000\004\000\006\000\
\004\000\006\000\002\000\002\000\002\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\007\000\000\000\001\000\000\000\
\002\000\001\000\001\000\001\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\136\000\000\000\002\000\000\000\000\000\
\000\000\003\000\000\000\000\000\000\000\000\000\006\000\000\000\
\001\000\007\000\008\000\009\000\010\000\011\000\004\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\135\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\130\000\131\000\133\000\132\000\134\000\
\000\000\000\000\082\000\000\000\000\000\047\000\000\000\037\000\
\024\000\012\000\013\000\014\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\000\000\026\000\025\000\
\040\000\044\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\085\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\050\000\000\000\048\000\032\000\031\000\
\033\000\030\000\039\000\000\000\000\000\028\000\000\000\000\000\
\000\000\000\000\089\000\000\000\000\000\000\000\000\000\052\000\
\000\000\058\000\055\000\054\000\000\000\038\000\027\000\000\000\
\000\000\000\000\000\000\000\000\000\000\051\000\000\000\000\000\
\000\000\000\000\000\000\088\000\090\000\000\000\053\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\057\000\000\000\
\000\000\062\000\059\000\000\000\000\000\034\000\000\000\125\000\
\000\000\000\000\000\000\068\000\000\000\069\000\000\000\000\000\
\000\000\000\000\000\000\060\000\061\000\000\000\056\000\067\000\
\000\000\066\000\000\000\065\000\000\000\000\000\000\000\000\000\
\000\000\064\000\000\000\000\000\074\000"

let yydgoto = "\002\000\
\004\000\007\000\009\000\010\000\018\000\019\000\020\000\021\000\
\022\000\072\000\164\000\172\000\173\000\222\000\194\000\120\000\
\034\000\054\000\055\000\165\000\185\000\187\000\188\000\200\000\
\219\000\220\000\231\000\226\000\128\000\149\000\050\000\051\000\
\129\000\203\000"

let yysindex = "\007\000\
\013\255\000\000\225\254\000\000\231\254\000\000\061\255\247\254\
\009\000\000\000\253\254\193\254\045\255\046\255\000\000\026\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\255\
\062\255\251\254\057\255\186\005\056\255\058\255\063\255\013\006\
\013\006\087\255\069\255\000\000\186\005\186\005\186\005\186\005\
\186\005\156\255\070\255\000\000\000\000\000\000\000\000\000\000\
\067\007\201\000\000\000\071\255\013\006\000\000\244\254\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\246\254\000\000\000\000\
\000\000\000\000\186\005\013\006\223\254\223\254\223\254\223\254\
\223\254\072\255\103\006\186\005\186\005\186\005\186\005\186\005\
\186\005\186\005\186\005\186\005\186\005\186\005\186\005\186\005\
\186\005\186\005\186\005\186\005\186\005\186\005\186\005\065\255\
\186\005\186\005\186\005\186\005\186\005\186\005\186\005\186\005\
\186\005\186\005\186\005\067\255\000\000\253\005\058\255\243\254\
\013\006\073\255\067\007\068\255\186\005\000\000\067\007\074\255\
\078\255\230\254\230\254\223\254\223\254\223\254\238\254\238\254\
\210\255\245\254\076\255\155\007\111\007\121\255\121\255\121\255\
\121\255\121\255\121\255\147\006\064\255\081\255\067\007\067\007\
\067\007\067\007\067\007\067\007\067\007\067\007\067\007\067\007\
\067\007\083\255\013\006\000\000\097\255\000\000\000\000\000\000\
\000\000\000\000\000\000\090\255\099\255\000\000\013\006\186\005\
\238\254\186\005\000\000\000\000\186\005\186\005\058\255\000\000\
\252\254\000\000\000\000\000\000\013\006\000\000\000\000\191\006\
\067\007\067\007\079\255\106\255\254\254\000\000\013\006\055\005\
\142\255\186\005\123\255\000\000\000\000\253\005\000\000\186\005\
\125\255\186\005\127\255\186\005\186\005\117\255\000\000\248\254\
\235\006\000\000\000\000\131\255\186\005\000\000\067\007\000\000\
\097\255\132\255\074\255\000\000\023\007\000\000\097\255\134\255\
\023\007\057\255\186\005\000\000\000\000\067\007\000\000\000\000\
\189\255\000\000\186\005\000\000\161\255\067\007\179\005\137\255\
\186\005\000\000\186\005\067\007\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\164\255\000\000\000\000\051\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
\099\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\232\000\021\001\068\001\123\001\
\169\001\000\000\000\000\144\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\139\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\146\255\000\000\048\255\
\000\000\000\000\172\000\000\000\000\000\000\000\232\254\148\255\
\000\000\113\002\168\002\223\001\021\002\066\002\214\002\012\003\
\111\003\158\003\194\003\205\003\022\000\240\003\003\004\038\004\
\049\004\084\004\097\004\143\255\000\000\078\000\167\000\089\003\
\062\004\144\004\178\004\189\004\200\004\213\004\225\004\022\005\
\034\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\066\003\000\000\000\000\155\000\147\255\144\255\051\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\150\255\
\235\254\055\255\000\000\000\000\000\000\000\000\000\000\000\000\
\151\255\000\000\000\000\000\000\000\000\146\255\000\000\152\255\
\000\000\000\000\000\000\153\255\000\000\000\000\000\000\059\006\
\000\000\000\000\000\000\000\000\000\000\000\000\163\255\000\000\
\000\000\000\000\159\255\000\000\000\000\000\000\000\000\000\000\
\000\000\164\255\000\000\000\000\000\000\168\255\000\000\000\000\
\135\005\000\000\153\255\000\000\000\000\177\255\000\000\000\000\
\000\000\000\000\160\255\179\255\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\090\000\000\000\000\000\000\000\251\255\000\000\
\244\255\136\000\073\000\051\000\000\000\033\000\066\255\000\000\
\012\000\000\000\000\000\000\000\054\000\082\255\000\000\000\000\
\081\000\000\000"

let yytablesize = 2281
let yytable = "\031\000\
\083\000\167\000\168\000\169\000\170\000\024\000\195\000\001\000\
\017\000\218\000\087\000\088\000\089\000\003\000\005\000\025\000\
\085\000\086\000\087\000\088\000\089\000\107\000\049\000\085\000\
\086\000\087\000\088\000\089\000\090\000\091\000\092\000\077\000\
\078\000\079\000\080\000\081\000\083\000\232\000\241\000\103\000\
\242\000\235\000\244\000\032\000\104\000\072\000\103\000\005\000\
\073\000\006\000\072\000\104\000\072\000\073\000\103\000\073\000\
\218\000\118\000\171\000\104\000\084\000\103\000\008\000\121\000\
\119\000\198\000\104\000\206\000\248\000\123\000\122\000\023\000\
\199\000\011\000\119\000\028\000\253\000\086\000\127\000\130\000\
\131\000\132\000\133\000\134\000\135\000\136\000\137\000\138\000\
\139\000\140\000\141\000\142\000\143\000\144\000\145\000\146\000\
\147\000\148\000\042\000\151\000\152\000\153\000\154\000\155\000\
\156\000\157\000\158\000\159\000\160\000\161\000\085\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\093\000\177\000\
\046\000\073\000\074\000\026\000\027\000\076\000\029\000\046\000\
\076\000\076\000\030\000\082\000\033\000\056\000\052\000\075\000\
\053\000\076\000\084\000\181\000\116\000\125\000\117\000\150\000\
\176\000\162\000\175\000\179\000\103\000\182\000\178\000\183\000\
\204\000\104\000\087\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\124\000\114\000\186\000\
\189\000\035\000\192\000\041\000\193\000\190\000\057\000\205\000\
\127\000\036\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\221\000\037\000\
\224\000\103\000\217\000\234\000\223\000\247\000\104\000\228\000\
\038\000\230\000\127\000\039\000\229\000\237\000\240\000\233\000\
\243\000\249\000\174\000\251\000\043\000\126\000\075\000\238\000\
\049\000\127\000\076\000\128\000\075\000\245\000\040\000\041\000\
\042\000\035\000\070\000\075\000\070\000\246\000\075\000\093\000\
\129\000\071\000\043\000\071\000\044\000\045\000\046\000\047\000\
\048\000\217\000\036\000\252\000\085\000\086\000\087\000\088\000\
\089\000\090\000\091\000\078\000\184\000\077\000\166\000\197\000\
\225\000\239\000\250\000\083\000\083\000\227\000\196\000\000\000\
\191\000\000\000\000\000\012\000\013\000\083\000\000\000\000\000\
\000\000\005\000\005\000\000\000\092\000\014\000\201\000\000\000\
\107\000\107\000\103\000\005\000\000\000\000\000\000\000\104\000\
\207\000\000\000\107\000\083\000\083\000\083\000\083\000\083\000\
\083\000\083\000\083\000\083\000\083\000\000\000\083\000\083\000\
\000\000\079\000\000\000\079\000\079\000\079\000\079\000\079\000\
\079\000\079\000\079\000\079\000\079\000\083\000\083\000\083\000\
\083\000\083\000\083\000\091\000\107\000\000\000\083\000\083\000\
\000\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
\086\000\086\000\000\000\015\000\000\000\000\000\000\000\016\000\
\000\000\005\000\086\000\107\000\107\000\005\000\000\000\107\000\
\107\000\107\000\107\000\000\000\107\000\042\000\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\094\000\086\000\086\000\000\000\080\000\000\000\
\080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
\080\000\080\000\086\000\086\000\086\000\086\000\086\000\086\000\
\000\000\000\000\000\000\086\000\086\000\000\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\087\000\087\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\087\000\
\095\000\114\000\114\000\000\000\000\000\042\000\041\000\041\000\
\000\000\042\000\000\000\114\000\000\000\000\000\000\000\000\000\
\041\000\000\000\000\000\000\000\000\000\087\000\087\000\087\000\
\087\000\087\000\087\000\087\000\087\000\087\000\087\000\000\000\
\087\000\087\000\000\000\081\000\000\000\081\000\081\000\081\000\
\081\000\081\000\081\000\081\000\081\000\081\000\081\000\087\000\
\087\000\087\000\087\000\087\000\087\000\000\000\098\000\000\000\
\087\000\087\000\000\000\087\000\087\000\087\000\087\000\087\000\
\087\000\087\000\093\000\093\000\114\000\114\000\000\000\000\000\
\114\000\114\000\114\000\114\000\093\000\114\000\041\000\000\000\
\000\000\105\000\041\000\106\000\107\000\108\000\109\000\110\000\
\111\000\112\000\113\000\114\000\115\000\000\000\000\000\000\000\
\000\000\000\000\093\000\093\000\093\000\093\000\093\000\093\000\
\093\000\093\000\093\000\093\000\099\000\093\000\093\000\092\000\
\092\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\092\000\000\000\000\000\093\000\093\000\093\000\093\000\
\093\000\093\000\000\000\000\000\000\000\093\000\093\000\000\000\
\000\000\093\000\093\000\093\000\093\000\000\000\093\000\092\000\
\092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
\092\000\100\000\092\000\092\000\000\000\000\000\091\000\091\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\091\000\092\000\092\000\092\000\092\000\092\000\092\000\000\000\
\000\000\000\000\092\000\092\000\000\000\000\000\092\000\092\000\
\092\000\092\000\000\000\092\000\000\000\000\000\091\000\091\000\
\091\000\091\000\091\000\091\000\091\000\091\000\091\000\091\000\
\096\000\091\000\091\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\094\000\094\000\000\000\
\091\000\091\000\091\000\091\000\091\000\091\000\000\000\094\000\
\000\000\091\000\091\000\000\000\000\000\091\000\091\000\091\000\
\091\000\000\000\091\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\094\000\094\000\094\000\
\094\000\094\000\094\000\094\000\094\000\094\000\094\000\097\000\
\094\000\094\000\000\000\095\000\095\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\095\000\000\000\094\000\
\094\000\094\000\094\000\094\000\094\000\000\000\000\000\000\000\
\094\000\094\000\000\000\000\000\094\000\094\000\094\000\094\000\
\000\000\094\000\000\000\095\000\095\000\095\000\095\000\095\000\
\095\000\095\000\095\000\095\000\095\000\101\000\095\000\095\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\098\000\098\000\000\000\000\000\095\000\095\000\095\000\
\095\000\095\000\095\000\098\000\000\000\000\000\095\000\095\000\
\000\000\000\000\095\000\095\000\095\000\095\000\000\000\095\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
\098\000\098\000\098\000\102\000\098\000\098\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\099\000\
\099\000\000\000\000\000\098\000\098\000\098\000\098\000\098\000\
\098\000\099\000\000\000\000\000\098\000\098\000\000\000\000\000\
\098\000\098\000\098\000\098\000\000\000\098\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\099\000\
\099\000\099\000\099\000\099\000\099\000\099\000\099\000\099\000\
\099\000\084\000\099\000\099\000\100\000\100\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\100\000\000\000\
\000\000\099\000\099\000\099\000\099\000\099\000\099\000\000\000\
\115\000\000\000\099\000\099\000\000\000\000\000\099\000\099\000\
\099\000\099\000\000\000\099\000\100\000\100\000\100\000\100\000\
\100\000\100\000\100\000\100\000\100\000\100\000\103\000\100\000\
\100\000\000\000\000\000\096\000\096\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\096\000\100\000\100\000\
\100\000\100\000\100\000\100\000\000\000\000\000\000\000\100\000\
\100\000\000\000\000\000\100\000\100\000\100\000\100\000\000\000\
\100\000\000\000\000\000\096\000\096\000\000\000\000\000\000\000\
\096\000\096\000\096\000\096\000\096\000\104\000\096\000\096\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\097\000\097\000\000\000\096\000\096\000\096\000\
\096\000\096\000\096\000\000\000\097\000\000\000\096\000\096\000\
\000\000\000\000\096\000\096\000\096\000\096\000\000\000\096\000\
\000\000\105\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\097\000\097\000\106\000\000\000\000\000\097\000\
\097\000\097\000\097\000\097\000\000\000\097\000\097\000\000\000\
\101\000\101\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\101\000\000\000\097\000\097\000\097\000\097\000\
\097\000\097\000\000\000\000\000\000\000\097\000\097\000\108\000\
\000\000\097\000\097\000\097\000\097\000\000\000\097\000\000\000\
\000\000\000\000\000\000\000\000\000\000\101\000\101\000\101\000\
\101\000\101\000\109\000\101\000\101\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\102\000\102\000\
\000\000\000\000\101\000\101\000\101\000\101\000\101\000\101\000\
\102\000\000\000\000\000\101\000\101\000\000\000\000\000\101\000\
\101\000\101\000\101\000\000\000\101\000\110\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\111\000\000\000\000\000\102\000\102\000\102\000\102\000\102\000\
\000\000\102\000\102\000\000\000\000\000\116\000\000\000\000\000\
\000\000\000\000\000\000\000\000\084\000\084\000\000\000\000\000\
\102\000\102\000\102\000\102\000\102\000\102\000\084\000\000\000\
\000\000\102\000\102\000\112\000\000\000\102\000\102\000\102\000\
\102\000\000\000\102\000\115\000\115\000\000\000\000\000\000\000\
\113\000\000\000\000\000\000\000\000\000\115\000\000\000\000\000\
\000\000\084\000\084\000\084\000\084\000\084\000\000\000\084\000\
\084\000\103\000\103\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\103\000\000\000\000\000\084\000\084\000\
\084\000\084\000\084\000\084\000\000\000\000\000\000\000\084\000\
\084\000\000\000\000\000\084\000\084\000\084\000\084\000\117\000\
\084\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\103\000\103\000\103\000\000\000\103\000\103\000\115\000\115\000\
\104\000\104\000\115\000\115\000\115\000\115\000\000\000\115\000\
\000\000\000\000\104\000\103\000\103\000\103\000\103\000\103\000\
\103\000\118\000\000\000\000\000\103\000\103\000\000\000\000\000\
\103\000\103\000\103\000\103\000\119\000\103\000\000\000\000\000\
\000\000\000\000\000\000\000\000\105\000\105\000\000\000\120\000\
\104\000\104\000\000\000\104\000\104\000\000\000\105\000\106\000\
\106\000\000\000\000\000\000\000\121\000\000\000\000\000\000\000\
\000\000\106\000\104\000\104\000\104\000\104\000\104\000\104\000\
\122\000\000\000\000\000\104\000\104\000\000\000\000\000\104\000\
\104\000\104\000\104\000\000\000\104\000\105\000\000\000\105\000\
\105\000\000\000\108\000\108\000\000\000\000\000\000\000\000\000\
\000\000\000\000\106\000\106\000\108\000\000\000\105\000\105\000\
\105\000\105\000\105\000\105\000\000\000\109\000\109\000\105\000\
\105\000\000\000\000\000\105\000\105\000\105\000\105\000\109\000\
\105\000\000\000\106\000\106\000\000\000\123\000\106\000\106\000\
\106\000\106\000\000\000\106\000\000\000\108\000\108\000\000\000\
\000\000\124\000\000\000\000\000\000\000\000\000\000\000\000\000\
\110\000\110\000\000\000\000\000\000\000\000\000\000\000\000\000\
\109\000\109\000\110\000\111\000\111\000\108\000\108\000\000\000\
\000\000\108\000\108\000\108\000\108\000\111\000\108\000\000\000\
\116\000\116\000\000\000\000\000\000\000\000\000\000\000\000\000\
\109\000\109\000\116\000\000\000\109\000\109\000\109\000\109\000\
\000\000\109\000\000\000\110\000\110\000\000\000\112\000\112\000\
\000\000\000\000\000\000\000\000\000\000\000\000\111\000\111\000\
\112\000\000\000\000\000\113\000\113\000\000\000\000\000\000\000\
\000\000\000\000\000\000\110\000\110\000\113\000\000\000\110\000\
\110\000\110\000\110\000\000\000\110\000\000\000\111\000\111\000\
\000\000\000\000\111\000\111\000\111\000\111\000\000\000\111\000\
\000\000\112\000\112\000\116\000\116\000\000\000\000\000\116\000\
\116\000\116\000\116\000\000\000\116\000\000\000\113\000\113\000\
\000\000\000\000\117\000\117\000\000\000\000\000\000\000\000\000\
\000\000\112\000\112\000\000\000\117\000\112\000\112\000\112\000\
\112\000\000\000\112\000\000\000\000\000\000\000\113\000\113\000\
\000\000\000\000\113\000\113\000\113\000\113\000\000\000\113\000\
\000\000\000\000\000\000\000\000\118\000\118\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\118\000\119\000\
\119\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\119\000\120\000\120\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\120\000\117\000\117\000\121\000\
\121\000\117\000\117\000\117\000\117\000\000\000\117\000\000\000\
\000\000\121\000\000\000\122\000\122\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\122\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\118\000\
\118\000\000\000\000\000\118\000\118\000\118\000\118\000\000\000\
\118\000\000\000\119\000\119\000\000\000\000\000\119\000\119\000\
\119\000\119\000\000\000\119\000\000\000\120\000\120\000\000\000\
\000\000\120\000\120\000\120\000\120\000\000\000\120\000\000\000\
\123\000\123\000\121\000\121\000\000\000\000\000\121\000\121\000\
\121\000\121\000\123\000\121\000\124\000\124\000\122\000\122\000\
\000\000\000\000\122\000\122\000\122\000\122\000\124\000\122\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\208\000\209\000\210\000\000\000\
\211\000\212\000\213\000\214\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\036\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\037\000\123\000\123\000\000\000\000\000\123\000\
\123\000\123\000\123\000\038\000\123\000\000\000\039\000\124\000\
\124\000\000\000\000\000\124\000\124\000\124\000\124\000\000\000\
\124\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\040\000\041\000\042\000\000\000\186\000\215\000\000\000\
\000\000\000\000\000\000\000\000\000\000\216\000\000\000\044\000\
\045\000\046\000\047\000\048\000\063\000\063\000\063\000\000\000\
\063\000\063\000\063\000\063\000\063\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\063\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\063\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\000\000\000\000\000\063\000\000\000\
\208\000\209\000\210\000\000\000\211\000\212\000\213\000\214\000\
\035\000\000\000\000\000\000\000\000\000\000\000\000\000\035\000\
\036\000\063\000\063\000\063\000\000\000\063\000\063\000\036\000\
\000\000\000\000\000\000\000\000\000\000\063\000\037\000\063\000\
\063\000\063\000\063\000\063\000\000\000\037\000\000\000\038\000\
\000\000\000\000\039\000\000\000\000\000\000\000\038\000\000\000\
\000\000\039\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\040\000\041\000\042\000\
\000\000\186\000\000\000\000\000\040\000\041\000\042\000\000\000\
\000\000\216\000\000\000\044\000\045\000\046\000\047\000\048\000\
\043\000\000\000\044\000\045\000\046\000\047\000\048\000\057\000\
\000\000\000\000\000\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\057\000\
\000\000\000\000\000\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\163\000\000\000\000\000\000\000\070\000\000\000\000\000\
\000\000\000\000\000\000\000\000\071\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\070\000\000\000\000\000\
\000\000\000\000\000\000\000\000\071\000\083\000\083\000\083\000\
\083\000\083\000\083\000\083\000\083\000\083\000\083\000\000\000\
\083\000\083\000\000\000\079\000\000\000\079\000\079\000\079\000\
\079\000\079\000\079\000\079\000\079\000\079\000\079\000\083\000\
\083\000\083\000\083\000\083\000\083\000\000\000\000\000\000\000\
\000\000\000\000\000\000\083\000\000\000\083\000\000\000\000\000\
\083\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\093\000\094\000\000\000\095\000\096\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\097\000\098\000\099\000\100\000\101\000\
\102\000\000\000\000\000\000\000\126\000\000\000\000\000\103\000\
\000\000\000\000\000\000\000\000\104\000\085\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\093\000\094\000\000\000\
\095\000\096\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\097\000\
\098\000\099\000\100\000\101\000\102\000\000\000\000\000\000\000\
\000\000\000\000\000\000\103\000\180\000\000\000\000\000\000\000\
\104\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\093\000\094\000\000\000\095\000\096\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\097\000\098\000\099\000\100\000\101\000\
\102\000\000\000\000\000\000\000\000\000\000\000\000\000\103\000\
\000\000\000\000\000\000\202\000\104\000\085\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\093\000\094\000\000\000\
\095\000\096\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\097\000\
\098\000\099\000\100\000\101\000\102\000\000\000\000\000\000\000\
\000\000\000\000\000\000\103\000\000\000\236\000\000\000\000\000\
\104\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\093\000\094\000\000\000\095\000\096\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\097\000\098\000\099\000\100\000\101\000\
\102\000\000\000\000\000\000\000\000\000\186\000\000\000\103\000\
\000\000\000\000\000\000\000\000\104\000\085\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\093\000\094\000\000\000\
\095\000\096\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\097\000\
\098\000\099\000\100\000\101\000\102\000\000\000\000\000\000\000\
\000\000\000\000\000\000\103\000\000\000\000\000\000\000\000\000\
\104\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\093\000\094\000\000\000\095\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\097\000\098\000\099\000\100\000\101\000\
\102\000\000\000\000\000\000\000\000\000\000\000\000\000\103\000\
\000\000\000\000\000\000\000\000\104\000\085\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\093\000\094\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\097\000\
\098\000\099\000\100\000\101\000\102\000\000\000\000\000\000\000\
\000\000\000\000\000\000\103\000\000\000\000\000\000\000\000\000\
\104\000"

let yycheck = "\005\001\
\000\000\015\001\016\001\017\001\018\001\069\001\181\000\001\000\
\000\000\200\000\037\001\038\001\039\001\001\001\000\000\079\001\
\035\001\036\001\037\001\038\001\039\001\000\000\028\000\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\037\000\
\038\000\039\000\040\000\041\000\042\000\212\000\229\000\073\001\
\231\000\050\001\233\000\049\001\078\001\070\001\073\001\079\001\
\070\001\075\001\075\001\078\001\077\001\075\001\073\001\077\001\
\247\000\070\001\072\001\078\001\069\001\073\001\002\001\074\001\
\077\001\070\001\078\001\070\001\243\000\075\000\081\001\075\001\
\077\001\083\001\077\001\050\001\251\000\000\000\084\000\085\000\
\086\000\087\000\088\000\089\000\090\000\091\000\092\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\100\000\101\000\
\102\000\103\000\000\000\105\000\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\113\000\114\000\115\000\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\125\000\
\070\001\032\000\033\000\079\001\079\001\071\001\079\001\077\001\
\074\001\075\001\069\001\042\000\076\001\071\001\079\001\049\001\
\079\001\069\001\069\001\076\001\070\001\070\001\053\000\079\001\
\077\001\079\001\074\001\070\001\073\001\069\001\077\001\069\001\
\074\001\078\001\000\000\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\076\000\000\000\071\001\
\079\001\014\001\176\000\000\000\178\000\075\001\019\001\070\001\
\182\000\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\049\001\036\001\
\070\001\073\001\200\000\079\001\202\000\009\001\078\001\075\001\
\045\001\075\001\208\000\048\001\210\000\075\001\075\001\213\000\
\075\001\049\001\121\000\075\001\049\001\070\001\076\001\221\000\
\071\001\070\001\076\001\070\001\074\001\234\000\067\001\068\001\
\069\001\075\001\075\001\075\001\073\001\235\000\071\001\000\000\
\070\001\075\001\079\001\080\001\081\001\082\001\083\001\084\001\
\085\001\247\000\075\001\249\000\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\075\001\163\000\075\001\119\000\183\000\
\206\000\225\000\247\000\003\001\004\001\208\000\182\000\255\255\
\175\000\255\255\255\255\003\001\004\001\013\001\255\255\255\255\
\255\255\003\001\004\001\255\255\000\000\013\001\189\000\255\255\
\003\001\004\001\073\001\013\001\255\255\255\255\255\255\078\001\
\199\000\255\255\013\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\255\255\046\001\047\001\
\255\255\049\001\255\255\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\063\001\
\064\001\065\001\066\001\000\000\047\001\255\255\070\001\071\001\
\255\255\073\001\074\001\075\001\076\001\077\001\078\001\079\001\
\003\001\004\001\255\255\075\001\255\255\255\255\255\255\079\001\
\255\255\075\001\013\001\070\001\071\001\079\001\255\255\074\001\
\075\001\076\001\077\001\255\255\079\001\003\001\004\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\013\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\000\000\046\001\047\001\255\255\049\001\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\064\001\065\001\066\001\
\255\255\255\255\255\255\070\001\071\001\255\255\073\001\074\001\
\075\001\076\001\077\001\078\001\079\001\003\001\004\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\013\001\
\000\000\003\001\004\001\255\255\255\255\075\001\003\001\004\001\
\255\255\079\001\255\255\013\001\255\255\255\255\255\255\255\255\
\013\001\255\255\255\255\255\255\255\255\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\255\255\
\046\001\047\001\255\255\049\001\255\255\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\061\001\
\062\001\063\001\064\001\065\001\066\001\255\255\000\000\255\255\
\070\001\071\001\255\255\073\001\074\001\075\001\076\001\077\001\
\078\001\079\001\003\001\004\001\070\001\071\001\255\255\255\255\
\074\001\075\001\076\001\077\001\013\001\079\001\075\001\255\255\
\255\255\049\001\079\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\255\255\255\255\255\255\
\255\255\255\255\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\000\000\046\001\047\001\003\001\
\004\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\013\001\255\255\255\255\061\001\062\001\063\001\064\001\
\065\001\066\001\255\255\255\255\255\255\070\001\071\001\255\255\
\255\255\074\001\075\001\076\001\077\001\255\255\079\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\000\000\046\001\047\001\255\255\255\255\003\001\004\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\013\001\061\001\062\001\063\001\064\001\065\001\066\001\255\255\
\255\255\255\255\070\001\071\001\255\255\255\255\074\001\075\001\
\076\001\077\001\255\255\079\001\255\255\255\255\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\000\000\046\001\047\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\003\001\004\001\255\255\
\061\001\062\001\063\001\064\001\065\001\066\001\255\255\013\001\
\255\255\070\001\071\001\255\255\255\255\074\001\075\001\076\001\
\077\001\255\255\079\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\000\000\
\046\001\047\001\255\255\003\001\004\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\013\001\255\255\061\001\
\062\001\063\001\064\001\065\001\066\001\255\255\255\255\255\255\
\070\001\071\001\255\255\255\255\074\001\075\001\076\001\077\001\
\255\255\079\001\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\000\000\046\001\047\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\003\001\004\001\255\255\255\255\061\001\062\001\063\001\
\064\001\065\001\066\001\013\001\255\255\255\255\070\001\071\001\
\255\255\255\255\074\001\075\001\076\001\077\001\255\255\079\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\000\000\046\001\047\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\003\001\
\004\001\255\255\255\255\061\001\062\001\063\001\064\001\065\001\
\066\001\013\001\255\255\255\255\070\001\071\001\255\255\255\255\
\074\001\075\001\076\001\077\001\255\255\079\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\000\000\046\001\047\001\003\001\004\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\013\001\255\255\
\255\255\061\001\062\001\063\001\064\001\065\001\066\001\255\255\
\000\000\255\255\070\001\071\001\255\255\255\255\074\001\075\001\
\076\001\077\001\255\255\079\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\000\000\046\001\
\047\001\255\255\255\255\003\001\004\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\013\001\061\001\062\001\
\063\001\064\001\065\001\066\001\255\255\255\255\255\255\070\001\
\071\001\255\255\255\255\074\001\075\001\076\001\077\001\255\255\
\079\001\255\255\255\255\035\001\036\001\255\255\255\255\255\255\
\040\001\041\001\042\001\043\001\044\001\000\000\046\001\047\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\003\001\004\001\255\255\061\001\062\001\063\001\
\064\001\065\001\066\001\255\255\013\001\255\255\070\001\071\001\
\255\255\255\255\074\001\075\001\076\001\077\001\255\255\079\001\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\035\001\036\001\000\000\255\255\255\255\040\001\
\041\001\042\001\043\001\044\001\255\255\046\001\047\001\255\255\
\003\001\004\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\013\001\255\255\061\001\062\001\063\001\064\001\
\065\001\066\001\255\255\255\255\255\255\070\001\071\001\000\000\
\255\255\074\001\075\001\076\001\077\001\255\255\079\001\255\255\
\255\255\255\255\255\255\255\255\255\255\040\001\041\001\042\001\
\043\001\044\001\000\000\046\001\047\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\003\001\004\001\
\255\255\255\255\061\001\062\001\063\001\064\001\065\001\066\001\
\013\001\255\255\255\255\070\001\071\001\255\255\255\255\074\001\
\075\001\076\001\077\001\255\255\079\001\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\040\001\041\001\042\001\043\001\044\001\
\255\255\046\001\047\001\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\003\001\004\001\255\255\255\255\
\061\001\062\001\063\001\064\001\065\001\066\001\013\001\255\255\
\255\255\070\001\071\001\000\000\255\255\074\001\075\001\076\001\
\077\001\255\255\079\001\003\001\004\001\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\040\001\041\001\042\001\043\001\044\001\255\255\046\001\
\047\001\003\001\004\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\013\001\255\255\255\255\061\001\062\001\
\063\001\064\001\065\001\066\001\255\255\255\255\255\255\070\001\
\071\001\255\255\255\255\074\001\075\001\076\001\077\001\000\000\
\079\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\042\001\043\001\044\001\255\255\046\001\047\001\070\001\071\001\
\003\001\004\001\074\001\075\001\076\001\077\001\255\255\079\001\
\255\255\255\255\013\001\061\001\062\001\063\001\064\001\065\001\
\066\001\000\000\255\255\255\255\070\001\071\001\255\255\255\255\
\074\001\075\001\076\001\077\001\000\000\079\001\255\255\255\255\
\255\255\255\255\255\255\255\255\003\001\004\001\255\255\000\000\
\043\001\044\001\255\255\046\001\047\001\255\255\013\001\003\001\
\004\001\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\013\001\061\001\062\001\063\001\064\001\065\001\066\001\
\000\000\255\255\255\255\070\001\071\001\255\255\255\255\074\001\
\075\001\076\001\077\001\255\255\079\001\044\001\255\255\046\001\
\047\001\255\255\003\001\004\001\255\255\255\255\255\255\255\255\
\255\255\255\255\046\001\047\001\013\001\255\255\061\001\062\001\
\063\001\064\001\065\001\066\001\255\255\003\001\004\001\070\001\
\071\001\255\255\255\255\074\001\075\001\076\001\077\001\013\001\
\079\001\255\255\070\001\071\001\255\255\000\000\074\001\075\001\
\076\001\077\001\255\255\079\001\255\255\046\001\047\001\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\003\001\004\001\255\255\255\255\255\255\255\255\255\255\255\255\
\046\001\047\001\013\001\003\001\004\001\070\001\071\001\255\255\
\255\255\074\001\075\001\076\001\077\001\013\001\079\001\255\255\
\003\001\004\001\255\255\255\255\255\255\255\255\255\255\255\255\
\070\001\071\001\013\001\255\255\074\001\075\001\076\001\077\001\
\255\255\079\001\255\255\046\001\047\001\255\255\003\001\004\001\
\255\255\255\255\255\255\255\255\255\255\255\255\046\001\047\001\
\013\001\255\255\255\255\003\001\004\001\255\255\255\255\255\255\
\255\255\255\255\255\255\070\001\071\001\013\001\255\255\074\001\
\075\001\076\001\077\001\255\255\079\001\255\255\070\001\071\001\
\255\255\255\255\074\001\075\001\076\001\077\001\255\255\079\001\
\255\255\046\001\047\001\070\001\071\001\255\255\255\255\074\001\
\075\001\076\001\077\001\255\255\079\001\255\255\046\001\047\001\
\255\255\255\255\003\001\004\001\255\255\255\255\255\255\255\255\
\255\255\070\001\071\001\255\255\013\001\074\001\075\001\076\001\
\077\001\255\255\079\001\255\255\255\255\255\255\070\001\071\001\
\255\255\255\255\074\001\075\001\076\001\077\001\255\255\079\001\
\255\255\255\255\255\255\255\255\003\001\004\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\013\001\003\001\
\004\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\013\001\003\001\004\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\013\001\070\001\071\001\003\001\
\004\001\074\001\075\001\076\001\077\001\255\255\079\001\255\255\
\255\255\013\001\255\255\003\001\004\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\070\001\
\071\001\255\255\255\255\074\001\075\001\076\001\077\001\255\255\
\079\001\255\255\070\001\071\001\255\255\255\255\074\001\075\001\
\076\001\077\001\255\255\079\001\255\255\070\001\071\001\255\255\
\255\255\074\001\075\001\076\001\077\001\255\255\079\001\255\255\
\003\001\004\001\070\001\071\001\255\255\255\255\074\001\075\001\
\076\001\077\001\013\001\079\001\003\001\004\001\070\001\071\001\
\255\255\255\255\074\001\075\001\076\001\077\001\013\001\079\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\006\001\007\001\008\001\255\255\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\022\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\036\001\070\001\071\001\255\255\255\255\074\001\
\075\001\076\001\077\001\045\001\079\001\255\255\048\001\070\001\
\071\001\255\255\255\255\074\001\075\001\076\001\077\001\255\255\
\079\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\067\001\068\001\069\001\255\255\071\001\072\001\255\255\
\255\255\255\255\255\255\255\255\255\255\079\001\255\255\081\001\
\082\001\083\001\084\001\085\001\006\001\007\001\008\001\255\255\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\022\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\036\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\045\001\255\255\255\255\048\001\255\255\
\006\001\007\001\008\001\255\255\010\001\011\001\012\001\013\001\
\014\001\255\255\255\255\255\255\255\255\255\255\255\255\014\001\
\022\001\067\001\068\001\069\001\255\255\071\001\072\001\022\001\
\255\255\255\255\255\255\255\255\255\255\079\001\036\001\081\001\
\082\001\083\001\084\001\085\001\255\255\036\001\255\255\045\001\
\255\255\255\255\048\001\255\255\255\255\255\255\045\001\255\255\
\255\255\048\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\067\001\068\001\069\001\
\255\255\071\001\255\255\255\255\067\001\068\001\069\001\255\255\
\255\255\079\001\255\255\081\001\082\001\083\001\084\001\085\001\
\079\001\255\255\081\001\082\001\083\001\084\001\085\001\019\001\
\255\255\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\019\001\
\255\255\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\069\001\255\255\255\255\255\255\073\001\255\255\255\255\
\255\255\255\255\255\255\255\255\080\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\073\001\255\255\255\255\
\255\255\255\255\255\255\255\255\080\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\255\255\
\046\001\047\001\255\255\049\001\255\255\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\061\001\
\062\001\063\001\064\001\065\001\066\001\255\255\255\255\255\255\
\255\255\255\255\255\255\073\001\255\255\075\001\255\255\255\255\
\078\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\255\255\046\001\047\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\061\001\062\001\063\001\064\001\065\001\
\066\001\255\255\255\255\255\255\070\001\255\255\255\255\073\001\
\255\255\255\255\255\255\255\255\078\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\255\255\
\046\001\047\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\061\001\
\062\001\063\001\064\001\065\001\066\001\255\255\255\255\255\255\
\255\255\255\255\255\255\073\001\074\001\255\255\255\255\255\255\
\078\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\255\255\046\001\047\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\061\001\062\001\063\001\064\001\065\001\
\066\001\255\255\255\255\255\255\255\255\255\255\255\255\073\001\
\255\255\255\255\255\255\077\001\078\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\255\255\
\046\001\047\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\061\001\
\062\001\063\001\064\001\065\001\066\001\255\255\255\255\255\255\
\255\255\255\255\255\255\073\001\255\255\075\001\255\255\255\255\
\078\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\255\255\046\001\047\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\061\001\062\001\063\001\064\001\065\001\
\066\001\255\255\255\255\255\255\255\255\071\001\255\255\073\001\
\255\255\255\255\255\255\255\255\078\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\255\255\
\046\001\047\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\061\001\
\062\001\063\001\064\001\065\001\066\001\255\255\255\255\255\255\
\255\255\255\255\255\255\073\001\255\255\255\255\255\255\255\255\
\078\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\255\255\046\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\061\001\062\001\063\001\064\001\065\001\
\066\001\255\255\255\255\255\255\255\255\255\255\255\255\073\001\
\255\255\255\255\255\255\255\255\078\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\061\001\
\062\001\063\001\064\001\065\001\066\001\255\255\255\255\255\255\
\255\255\255\255\255\255\073\001\255\255\255\255\255\255\255\255\
\078\001"

let yynames_const = "\
  PACKAGE\000\
  IMPORT\000\
  FUNC\000\
  TYPE\000\
  STRUCT\000\
  RETURN\000\
  BREAK\000\
  IF\000\
  ELSE\000\
  CONTINUE\000\
  FOR\000\
  WHILE\000\
  CONST\000\
  MAKE\000\
  FINAL\000\
  MUT\000\
  LATE\000\
  PRIVATE\000\
  ERROR\000\
  TRUE\000\
  FALSE\000\
  NULL\000\
  BOOL\000\
  STRING\000\
  U8\000\
  U16\000\
  U32\000\
  U64\000\
  I8\000\
  I16\000\
  I32\000\
  I64\000\
  F16\000\
  F32\000\
  PLUS\000\
  MINUS\000\
  MULT\000\
  DIV\000\
  MOD\000\
  LSHIFT\000\
  RSHIFT\000\
  BITAND\000\
  BITXOR\000\
  BITOR\000\
  BITNOT\000\
  AND\000\
  OR\000\
  NOT\000\
  ASSIGN\000\
  DECL_ASSIGN\000\
  PLUS_ASSIGN\000\
  MINUS_ASSIGN\000\
  TIMES_ASSIGN\000\
  DIV_ASSIGN\000\
  MOD_ASSIGN\000\
  LSHIFT_ASSIGN\000\
  RSHIFT_ASSIGN\000\
  BITAND_ASSIGN\000\
  BITXOR_ASSIGN\000\
  BITOR_ASSIGN\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LE\000\
  GT\000\
  GE\000\
  INC\000\
  DEC\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  SEMICOLON\000\
  COLON\000\
  COMMA\000\
  DOT\000\
  EOF\000\
  UPLUS\000\
  UMINUS\000\
  IFX\000\
  "

let yynames_block = "\
  IDENT\000\
  TYPE_NAME\000\
  INT_LIT\000\
  FLOAT_LIT\000\
  STRING_LIT\000\
  CHAR_LIT\000\
  BOOL_LIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'import_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'decl_list) in
    Obj.repr(
# 64 "parser.mly"
      ( let (t,g,f,s) = _5 in
        { package_name      = _2;
          imports           = _4;
          type_declarations = List.rev t;
          global_vars       = List.rev g;
          functions         = List.rev f;
          struct_functions  = List.rev s } )
# 1034 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                                ( [] )
# 1040 "parser.ml"
               : 'import_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'import_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'import_decl) in
    Obj.repr(
# 74 "parser.mly"
                              ( _2 :: _1 )
# 1048 "parser.ml"
               : 'import_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 77 "parser.mly"
                                       ( _2 )
# 1055 "parser.ml"
               : 'import_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
                                 ( ([],[],[],[]) )
# 1061 "parser.ml"
               : 'decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decl_list) in
    Obj.repr(
# 82 "parser.mly"
                                ( _1 )
# 1068 "parser.ml"
               : 'decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'top_decl) in
    Obj.repr(
# 83 "parser.mly"
                              (
        let (tl,gl,fl,sl) = _1 in
        match _2 with
        | `T d  -> (d::tl, gl,     fl,     sl)
        | `G g  -> (tl,    g::gl,  fl,     sl)
        | `F f  -> (tl,    gl,     f::fl,  sl)
        | `S sf -> (tl,    gl,     fl,     sf::sl) )
# 1082 "parser.ml"
               : 'decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_decl) in
    Obj.repr(
# 92 "parser.mly"
                              ( `T _1 )
# 1089 "parser.ml"
               : 'top_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'global_decl) in
    Obj.repr(
# 93 "parser.mly"
                              ( `G _1 )
# 1096 "parser.ml"
               : 'top_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_decl) in
    Obj.repr(
# 94 "parser.mly"
                              ( `F _1 )
# 1103 "parser.ml"
               : 'top_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'struct_func_decl) in
    Obj.repr(
# 95 "parser.mly"
                              ( `S _1 )
# 1110 "parser.ml"
               : 'top_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "parser.mly"
             ( Primitive Bool  )
# 1116 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "parser.mly"
                                          ( Primitive String )
# 1122 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "parser.mly"
             ( Primitive U8    )
# 1128 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "parser.mly"
                                          ( Primitive U16   )
# 1134 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
             ( Primitive U32   )
# 1140 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
                                          ( Primitive U64   )
# 1146 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "parser.mly"
             ( Primitive I8    )
# 1152 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "parser.mly"
                                          ( Primitive I16   )
# 1158 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
             ( Primitive I32   )
# 1164 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
                                          ( Primitive I64   )
# 1170 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
             ( Primitive F16   )
# 1176 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
                                          ( Primitive F32   )
# 1182 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "parser.mly"
             ( Primitive Error )
# 1188 "parser.ml"
               : 'primitive_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primitive_type) in
    Obj.repr(
# 108 "parser.mly"
                                           ( _1 )
# 1195 "parser.ml"
               : 'type_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 109 "parser.mly"
                                           ( TypeName _1 )
# 1202 "parser.ml"
               : 'type_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 110 "parser.mly"
                                           ( Array(_4,_2) )
# 1210 "parser.ml"
               : 'type_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 111 "parser.mly"
                                           ( Slice _3 )
# 1217 "parser.ml"
               : 'type_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 115 "parser.mly"
                      ( None )
# 1223 "parser.ml"
               : 'modifier_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 116 "parser.mly"
                   ( Some Private )
# 1229 "parser.ml"
               : 'modifier_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "parser.mly"
                   ( Some Mutable )
# 1235 "parser.ml"
               : 'modifier_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 118 "parser.mly"
                   ( Some Final )
# 1241 "parser.ml"
               : 'modifier_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "parser.mly"
                   ( Some Late )
# 1247 "parser.ml"
               : 'modifier_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'modifier_opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'default_opt) in
    Obj.repr(
# 123 "parser.mly"
      ( { name=_2; field_type=_3; modifier=_1; default_value=_4 } )
# 1257 "parser.ml"
               : 'field))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "parser.mly"
                                ( None )
# 1263 "parser.ml"
               : 'default_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                             ( Some _2 )
# 1270 "parser.ml"
               : 'default_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 130 "parser.mly"
                                ( [] )
# 1276 "parser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'field_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'field) in
    Obj.repr(
# 131 "parser.mly"
                                 ( _2 :: _1 )
# 1284 "parser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    Obj.repr(
# 136 "parser.mly"
        (
            Scanner_state.register_type_name _2;
            TypeStruct(_2,List.rev _5)
        )
# 1295 "parser.ml"
               : 'type_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 141 "parser.mly"
        (
            Scanner_state.register_type_name _2;
            TypeAlias(_2,_4)
        )
# 1306 "parser.ml"
               : 'type_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'type_ann_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 149 "parser.mly"
        ( { is_const=true;
            name=_2;
            var_type=_3;
            initializer_expr=Some _5 } )
# 1318 "parser.ml"
               : 'global_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 154 "parser.mly"
        ( { is_const=false;
            name=_1;
            var_type=None;
            initializer_expr=Some _3 } )
# 1329 "parser.ml"
               : 'global_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 160 "parser.mly"
                         ( None )
# 1335 "parser.ml"
               : 'type_ann_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 161 "parser.mly"
                      ( Some _2 )
# 1342 "parser.ml"
               : 'type_ann_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 165 "parser.mly"
                      ( { name=_1; param_type=_2 } )
# 1350 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    Obj.repr(
# 168 "parser.mly"
                            ( [] )
# 1356 "parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 169 "parser.mly"
                          ( [_1] )
# 1363 "parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 170 "parser.mly"
                             ( _3 :: _1 )
# 1371 "parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 173 "parser.mly"
                                        ( [] )
# 1377 "parser.ml"
               : 'return_types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 174 "parser.mly"
                                     ( [_1] )
# 1384 "parser.ml"
               : 'return_types))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'type_expr_list) in
    Obj.repr(
# 175 "parser.mly"
                                     ( List.rev _2 )
# 1391 "parser.ml"
               : 'return_types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 178 "parser.mly"
                                          ( [_1] )
# 1398 "parser.ml"
               : 'type_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_expr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 179 "parser.mly"
                                          ( _3 :: _1 )
# 1406 "parser.ml"
               : 'type_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 182 "parser.mly"
          ( _1 )
# 1413 "parser.ml"
               : 'func_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'param_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'return_types) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'func_body) in
    Obj.repr(
# 186 "parser.mly"
        ( { name=_2; params=List.rev _4; return_types=_6; body=_7 } )
# 1423 "parser.ml"
               : 'func_decl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : 'param_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'return_types) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : 'func_body) in
    Obj.repr(
# 190 "parser.mly"
        ( { name=_6; struct_name=_3;
            params=List.rev _8; return_types=_10; body=_11 } )
# 1436 "parser.ml"
               : 'struct_func_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 195 "parser.mly"
                            ( _2 )
# 1443 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    Obj.repr(
# 198 "parser.mly"
                            ( [] )
# 1449 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 199 "parser.mly"
                          ( _2 :: _1 )
# 1457 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 202 "parser.mly"
                                    ( Expr _1 )
# 1464 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_decl) in
    Obj.repr(
# 203 "parser.mly"
                                    ( _1 )
# 1471 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 204 "parser.mly"
                                    ( Block _1 )
# 1478 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 205 "parser.mly"
                                    ( IfStmt(_2, _3, None) )
# 1486 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'block) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 206 "parser.mly"
                                    ( IfStmt(_2,_3,Some _5) )
# 1495 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 207 "parser.mly"
                                    ( WhileStmt(_2,_3) )
# 1503 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'for_clause) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 208 "parser.mly"
                                    ( let (init, cond, step) = _2 in ForStmt(init, cond, step, _3) )
# 1511 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ret_opt) in
    Obj.repr(
# 209 "parser.mly"
                                    ( Return _2 )
# 1518 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 210 "parser.mly"
                                    ( Break )
# 1524 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 211 "parser.mly"
                                    ( Continue )
# 1530 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 214 "parser.mly"
                           ( None )
# 1536 "parser.ml"
               : 'ret_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 215 "parser.mly"
                        ( Some (List.rev _1) )
# 1543 "parser.ml"
               : 'ret_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 218 "parser.mly"
                                   ( [_1] )
# 1550 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 219 "parser.mly"
                                   ( _3 :: _1 )
# 1558 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr_opt) in
    Obj.repr(
# 224 "parser.mly"
        ( (match _1 with
           | None -> None
           | Some e -> Some (Expr e)), _3, _5 )
# 1569 "parser.ml"
               : 'for_clause))
; (fun __caml_parser_env ->
    Obj.repr(
# 229 "parser.mly"
                 ( None )
# 1575 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 229 "parser.mly"
                                 ( Some _1 )
# 1582 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'type_ann_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 237 "parser.mly"
        ( VarDecl{is_const=true; name=_2; var_type=_3; initializer_expr=Some _5} )
# 1591 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 239 "parser.mly"
        ( VarDecl{is_const=false; name=_1; var_type=None; initializer_expr=Some _3} )
# 1599 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 245 "parser.mly"
                                    ( Identifier _1 )
# 1606 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 246 "parser.mly"
                                    ( FieldAccess(_1, _3) )
# 1614 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 247 "parser.mly"
                                    ( IndexAccess(_1, _3) )
# 1622 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 251 "parser.mly"
                                       ( _1 )
# 1629 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 252 "parser.mly"
                                       ( Identifier _1 )
# 1636 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'type_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 254 "parser.mly"
                                       ( Cast(_2, _4) )
# 1644 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 255 "parser.mly"
                                       ( _2 )
# 1651 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 256 "parser.mly"
                                       ( FieldAccess(_1,_3) )
# 1659 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 257 "parser.mly"
                                       ( IndexAccess(_1,_3) )
# 1667 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 259 "parser.mly"
        ( SliceExpr(_1,_3,_5) )
# 1676 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arg_list) in
    Obj.repr(
# 260 "parser.mly"
                                       ( FunctionCall(_1,_3) )
# 1684 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'arg_list) in
    Obj.repr(
# 262 "parser.mly"
        ( MethodCall(_1,_3,_5) )
# 1693 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 265 "parser.mly"
                                       ( Unaop(Not,_2) )
# 1700 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 266 "parser.mly"
                                       ( Unaop(Bitnot,_2) )
# 1707 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 267 "parser.mly"
                                       ( Unaop(Neg,_2) )
# 1714 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 268 "parser.mly"
                                       ( Unaop(Inc,_2) )
# 1721 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 269 "parser.mly"
                                       ( Unaop(Dec,_2) )
# 1728 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 272 "parser.mly"
                                       ( Binop(_1,Plus,_3) )
# 1736 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 273 "parser.mly"
                                       ( Binop(_1,Minus,_3) )
# 1744 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 274 "parser.mly"
                                       ( Binop(_1,Mult,_3) )
# 1752 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 275 "parser.mly"
                                       ( Binop(_1,Div,_3) )
# 1760 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 276 "parser.mly"
                                       ( Binop(_1,Mod,_3) )
# 1768 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 277 "parser.mly"
                                       ( Binop(_1,Lshift,_3) )
# 1776 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 278 "parser.mly"
                                       ( Binop(_1,Rshift,_3) )
# 1784 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 279 "parser.mly"
                                       ( Binop(_1,Bitand,_3) )
# 1792 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 280 "parser.mly"
                                       ( Binop(_1,Bitxor,_3) )
# 1800 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 281 "parser.mly"
                                       ( Binop(_1,Bitor,_3) )
# 1808 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 282 "parser.mly"
                                       ( Binop(_1,And,_3) )
# 1816 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 283 "parser.mly"
                                       ( Binop(_1,Or,_3) )
# 1824 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 284 "parser.mly"
                                       ( Binop(_1,Eq,_3) )
# 1832 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 285 "parser.mly"
                                       ( Binop(_1,Neq,_3) )
# 1840 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 286 "parser.mly"
                                       ( Binop(_1,Lt,_3) )
# 1848 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 287 "parser.mly"
                                       ( Binop(_1,Le,_3) )
# 1856 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 288 "parser.mly"
                                       ( Binop(_1,Gt,_3) )
# 1864 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 289 "parser.mly"
                                       ( Binop(_1,Ge,_3) )
# 1872 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 292 "parser.mly"
                                         ( SimpleAssign(_1,_3) )
# 1880 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 293 "parser.mly"
                                         ( CompoundAssign(_1,PlusAssign,_3) )
# 1888 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 294 "parser.mly"
                                         ( CompoundAssign(_1,MinusAssign,_3) )
# 1896 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 295 "parser.mly"
                                         ( CompoundAssign(_1,TimesAssign,_3) )
# 1904 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 296 "parser.mly"
                                         ( CompoundAssign(_1,DivAssign,_3) )
# 1912 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 297 "parser.mly"
                                         ( CompoundAssign(_1,ModAssign,_3) )
# 1920 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 298 "parser.mly"
                                         ( CompoundAssign(_1,LshiftAssign,_3) )
# 1928 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 299 "parser.mly"
                                         ( CompoundAssign(_1,RshiftAssign,_3) )
# 1936 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 300 "parser.mly"
                                         ( CompoundAssign(_1,BitandAssign,_3) )
# 1944 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 301 "parser.mly"
                                         ( CompoundAssign(_1,BitxorAssign,_3) )
# 1952 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 302 "parser.mly"
                                         ( CompoundAssign(_1,BitorAssign,_3) )
# 1960 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'type_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'cap_opt) in
    Obj.repr(
# 306 "parser.mly"
        ( Make(_3,_5,_6) )
# 1969 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 309 "parser.mly"
                               ( [] )
# 1975 "parser.ml"
               : 'arg_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 310 "parser.mly"
                             ( List.rev _1 )
# 1982 "parser.ml"
               : 'arg_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 313 "parser.mly"
                                ( None )
# 1988 "parser.ml"
               : 'cap_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 314 "parser.mly"
                             ( Some _2 )
# 1995 "parser.ml"
               : 'cap_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 318 "parser.mly"
                 ( IntLit _1   )
# 2002 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 319 "parser.mly"
                 ( FloatLit _1 )
# 2009 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 320 "parser.mly"
                 ( CharLit _1  )
# 2016 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 321 "parser.mly"
                 ( StringLit _1 )
# 2023 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 322 "parser.mly"
                 ( BoolLit _1  )
# 2030 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 323 "parser.mly"
                 ( Null )
# 2036 "parser.ml"
               : 'literal))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
;;
