type token =
  | FUNC
  | PACKAGE
  | IMPORT
  | TYPE
  | STRUCT
  | RETURN
  | BREAK
  | IF
  | ELSE
  | CONTINUE
  | FOR
  | WHILE
  | CONST
  | VAR
  | MAKE
  | ERROR
  | NULL
  | FINAL
  | MUT
  | LATE
  | PRIVATE
  | BOOL
  | STRING
  | U8
  | U16
  | U32
  | U64
  | I8
  | I16
  | I32
  | I64
  | F16
  | F32
  | PLUS
  | MINUS
  | DIV
  | MULT
  | MOD
  | LSHIFT
  | RSHIFT
  | BITXOR
  | BITOR
  | BITNOT
  | BITAND
  | ASSIGN
  | PLUS_ASSIGN
  | MINUS_ASSIGN
  | TIMES_ASSIGN
  | DIV_ASSIGN
  | MOD_ASSIGN
  | DECL_ASSIGN
  | LSHIFT_ASSIGN
  | RSHIFT_ASSIGN
  | BITAND_ASSIGN
  | BITXOR_ASSIGN
  | BITOR_ASSIGN
  | EQ
  | NEQ
  | LT
  | LE
  | GT
  | GE
  | AND
  | OR
  | NOT
  | INC
  | DEC
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | SEMICOLON
  | COLON
  | COMMA
  | DOT
  | QUESTION
  | EOF
  | INT_LIT of (
# 21 "parser.mly"
        int
# 85 "parser.ml"
)
  | BOOL_LIT of (
# 22 "parser.mly"
        bool
# 90 "parser.ml"
)
  | CHAR_LIT of (
# 23 "parser.mly"
        char
# 95 "parser.ml"
)
  | FLOAT_LIT of (
# 24 "parser.mly"
        float
# 100 "parser.ml"
)
  | STRING_LIT of (
# 25 "parser.mly"
        string
# 105 "parser.ml"
)
  | IDENT of (
# 26 "parser.mly"
        string
# 110 "parser.ml"
)

open Parsing
let _ = parse_error;;
# 3 "parser.mly"
 open Ast 
# 117 "parser.ml"
let yytransl_const = [|
  257 (* FUNC *);
  258 (* PACKAGE *);
  259 (* IMPORT *);
  260 (* TYPE *);
  261 (* STRUCT *);
  262 (* RETURN *);
  263 (* BREAK *);
  264 (* IF *);
  265 (* ELSE *);
  266 (* CONTINUE *);
  267 (* FOR *);
  268 (* WHILE *);
  269 (* CONST *);
  270 (* VAR *);
  271 (* MAKE *);
  272 (* ERROR *);
  273 (* NULL *);
  274 (* FINAL *);
  275 (* MUT *);
  276 (* LATE *);
  277 (* PRIVATE *);
  278 (* BOOL *);
  279 (* STRING *);
  280 (* U8 *);
  281 (* U16 *);
  282 (* U32 *);
  283 (* U64 *);
  284 (* I8 *);
  285 (* I16 *);
  286 (* I32 *);
  287 (* I64 *);
  288 (* F16 *);
  289 (* F32 *);
  290 (* PLUS *);
  291 (* MINUS *);
  292 (* DIV *);
  293 (* MULT *);
  294 (* MOD *);
  295 (* LSHIFT *);
  296 (* RSHIFT *);
  297 (* BITXOR *);
  298 (* BITOR *);
  299 (* BITNOT *);
  300 (* BITAND *);
  301 (* ASSIGN *);
  302 (* PLUS_ASSIGN *);
  303 (* MINUS_ASSIGN *);
  304 (* TIMES_ASSIGN *);
  305 (* DIV_ASSIGN *);
  306 (* MOD_ASSIGN *);
  307 (* DECL_ASSIGN *);
  308 (* LSHIFT_ASSIGN *);
  309 (* RSHIFT_ASSIGN *);
  310 (* BITAND_ASSIGN *);
  311 (* BITXOR_ASSIGN *);
  312 (* BITOR_ASSIGN *);
  313 (* EQ *);
  314 (* NEQ *);
  315 (* LT *);
  316 (* LE *);
  317 (* GT *);
  318 (* GE *);
  319 (* AND *);
  320 (* OR *);
  321 (* NOT *);
  322 (* INC *);
  323 (* DEC *);
  324 (* LPAREN *);
  325 (* RPAREN *);
  326 (* LBRACE *);
  327 (* RBRACE *);
  328 (* LBRACKET *);
  329 (* RBRACKET *);
  330 (* SEMICOLON *);
  331 (* COLON *);
  332 (* COMMA *);
  333 (* DOT *);
  334 (* QUESTION *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  335 (* INT_LIT *);
  336 (* BOOL_LIT *);
  337 (* CHAR_LIT *);
  338 (* FLOAT_LIT *);
  339 (* STRING_LIT *);
  340 (* IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\000\000"

let yylen = "\002\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\022\000\023\000\024\000\025\000\026\000\000\000\
\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\005\000\004\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yydgoto = "\002\000\
\009\000\010\000"

let yysindex = "\255\255\
\045\255\000\000\000\000\000\000\000\000\000\000\000\000\217\254\
\000\000\001\000\045\255\045\255\045\255\045\255\045\255\045\255\
\045\255\045\255\045\255\045\255\045\255\045\255\045\255\045\255\
\045\255\045\255\045\255\045\255\045\255\045\255\000\000\245\254\
\222\254\222\254\000\000\000\000\000\000\069\255\069\255\116\255\
\074\255\237\254\061\255\061\255\230\254\230\254\230\254\230\254\
\031\255\020\255\245\254"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\
\063\000\094\000\000\000\000\000\000\000\102\000\130\000\045\000\
\076\000\036\000\206\000\210\000\138\000\164\000\172\000\198\000\
\146\000\037\000\007\000"

let yygindex = "\000\000\
\000\000\200\000"

let yytablesize = 540
let yytable = "\001\000\
\031\000\014\000\015\000\016\000\021\000\011\000\020\000\012\000\
\013\000\014\000\015\000\016\000\017\000\018\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\000\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\027\000\
\021\000\000\000\000\000\011\000\019\000\022\000\023\000\024\000\
\025\000\026\000\027\000\000\000\009\000\022\000\023\000\024\000\
\025\000\026\000\027\000\028\000\029\000\012\000\013\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\002\000\021\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\000\000\021\000\010\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\000\000\000\000\000\000\000\000\022\000\
\023\000\024\000\025\000\026\000\027\000\003\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\007\000\012\000\013\000\
\014\000\015\000\016\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\000\000\000\000\021\000\000\000\024\000\
\025\000\026\000\027\000\003\000\004\000\005\000\006\000\007\000\
\008\000\008\000\022\000\023\000\024\000\025\000\026\000\027\000\
\000\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\018\000\000\000\000\000\000\000\012\000\013\000\014\000\
\015\000\016\000\017\000\018\000\000\000\000\000\000\000\021\000\
\000\000\000\000\000\000\015\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\016\000\022\000\023\000\024\000\025\000\
\026\000\027\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\012\000\000\000\000\000\
\000\000\013\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\050\000\051\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\012\000\013\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\000\000\021\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\
\029\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\030\000\027\000\011\000\011\000\021\000\011\000\
\020\000\000\000\000\000\000\000\000\000\009\000\009\000\000\000\
\027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\002\000\002\000\011\000\011\000\019\000\002\000\002\000\002\000\
\002\000\027\000\002\000\009\000\009\000\011\000\019\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\009\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\003\000\
\003\000\000\000\000\000\000\000\003\000\003\000\003\000\003\000\
\002\000\003\000\010\000\010\000\007\000\007\000\007\000\007\000\
\000\000\007\000\000\000\000\000\000\000\010\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\000\000\003\000\
\008\000\008\000\008\000\008\000\000\000\008\000\000\000\007\000\
\000\000\000\000\014\000\014\000\000\000\014\000\000\000\000\000\
\000\000\000\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\000\000\008\000\015\000\015\000\000\000\015\000\
\018\000\018\000\000\000\014\000\016\000\016\000\000\000\016\000\
\000\000\000\000\000\000\018\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\000\000\015\000\017\000\017\000\
\000\000\017\000\000\000\000\000\000\000\016\000\012\000\012\000\
\000\000\012\000\013\000\013\000\000\000\013\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\012\000\012\000\
\000\000\000\000\013\000\013\000\012\000\012\000\000\000\017\000\
\013\000\013\000\000\000\000\000\000\000\000\000\000\000\012\000\
\000\000\000\000\000\000\013\000"

let yycheck = "\001\000\
\000\000\036\001\037\001\038\001\000\000\045\001\000\000\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\255\255\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\000\000\
\044\001\255\255\255\255\000\000\000\000\057\001\058\001\059\001\
\060\001\061\001\062\001\255\255\000\000\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\000\000\044\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\255\255\044\001\000\000\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\255\255\255\255\255\255\255\255\057\001\
\058\001\059\001\060\001\061\001\062\001\000\000\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\000\000\034\001\035\001\
\036\001\037\001\038\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\255\255\255\255\044\001\255\255\059\001\
\060\001\061\001\062\001\079\001\080\001\081\001\082\001\083\001\
\084\001\000\000\057\001\058\001\059\001\060\001\061\001\062\001\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\255\255\255\255\255\255\044\001\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\057\001\058\001\059\001\060\001\
\061\001\062\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\000\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\022\000\023\000\024\000\
\025\000\026\000\027\000\028\000\029\000\030\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\255\255\044\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\057\001\058\001\059\001\060\001\061\001\062\001\063\001\
\064\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\074\001\044\001\041\001\042\001\074\001\044\001\
\074\001\255\255\255\255\255\255\255\255\041\001\042\001\255\255\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\034\001\035\001\063\001\064\001\064\001\039\001\040\001\041\001\
\042\001\074\001\044\001\063\001\064\001\074\001\074\001\255\255\
\255\255\255\255\255\255\255\255\255\255\042\001\074\001\057\001\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\034\001\
\035\001\255\255\255\255\255\255\039\001\040\001\041\001\042\001\
\074\001\044\001\063\001\064\001\039\001\040\001\041\001\042\001\
\255\255\044\001\255\255\255\255\255\255\074\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\064\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\064\001\255\255\074\001\
\039\001\040\001\041\001\042\001\255\255\044\001\255\255\074\001\
\255\255\255\255\041\001\042\001\255\255\044\001\255\255\255\255\
\255\255\255\255\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\064\001\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\064\001\255\255\074\001\041\001\042\001\255\255\044\001\
\063\001\064\001\255\255\074\001\041\001\042\001\255\255\044\001\
\255\255\255\255\255\255\074\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\064\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\064\001\255\255\074\001\041\001\042\001\
\255\255\044\001\255\255\255\255\255\255\074\001\041\001\042\001\
\255\255\044\001\041\001\042\001\255\255\044\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\064\001\057\001\058\001\
\255\255\255\255\057\001\058\001\063\001\064\001\255\255\074\001\
\063\001\064\001\255\255\255\255\255\255\255\255\255\255\074\001\
\255\255\255\255\255\255\074\001"

let yynames_const = "\
  FUNC\000\
  PACKAGE\000\
  IMPORT\000\
  TYPE\000\
  STRUCT\000\
  RETURN\000\
  BREAK\000\
  IF\000\
  ELSE\000\
  CONTINUE\000\
  FOR\000\
  WHILE\000\
  CONST\000\
  VAR\000\
  MAKE\000\
  ERROR\000\
  NULL\000\
  FINAL\000\
  MUT\000\
  LATE\000\
  PRIVATE\000\
  BOOL\000\
  STRING\000\
  U8\000\
  U16\000\
  U32\000\
  U64\000\
  I8\000\
  I16\000\
  I32\000\
  I64\000\
  F16\000\
  F32\000\
  PLUS\000\
  MINUS\000\
  DIV\000\
  MULT\000\
  MOD\000\
  LSHIFT\000\
  RSHIFT\000\
  BITXOR\000\
  BITOR\000\
  BITNOT\000\
  BITAND\000\
  ASSIGN\000\
  PLUS_ASSIGN\000\
  MINUS_ASSIGN\000\
  TIMES_ASSIGN\000\
  DIV_ASSIGN\000\
  MOD_ASSIGN\000\
  DECL_ASSIGN\000\
  LSHIFT_ASSIGN\000\
  RSHIFT_ASSIGN\000\
  BITAND_ASSIGN\000\
  BITXOR_ASSIGN\000\
  BITOR_ASSIGN\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LE\000\
  GT\000\
  GE\000\
  AND\000\
  OR\000\
  NOT\000\
  INC\000\
  DEC\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  SEMICOLON\000\
  COLON\000\
  COMMA\000\
  DOT\000\
  QUESTION\000\
  EOF\000\
  "

let yynames_block = "\
  INT_LIT\000\
  BOOL_LIT\000\
  CHAR_LIT\000\
  FLOAT_LIT\000\
  STRING_LIT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 53 "parser.mly"
           ( _1 )
# 493 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 56 "parser.mly"
                              ( Binop(_1, Plus, _3) )
# 501 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 57 "parser.mly"
                              ( Binop(_1, Minus, _3) )
# 509 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 58 "parser.mly"
                              ( Binop(_1, Mult, _3) )
# 517 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 59 "parser.mly"
                              ( Binop(_1, Div, _3) )
# 525 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 60 "parser.mly"
                              ( Binop(_1, Mod, _3) )
# 533 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 61 "parser.mly"
                              ( Binop(_1, Lshift, _3) )
# 541 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 62 "parser.mly"
                              ( Binop(_1, Rshift, _3) )
# 549 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 63 "parser.mly"
                              ( Binop(_1, Bitxor, _3) )
# 557 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 64 "parser.mly"
                              ( Binop(_1, Bitor, _3) )
# 565 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 65 "parser.mly"
                              ( Binop(_1, Bitand, _3) )
# 573 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 66 "parser.mly"
                              ( Binop(_1, Eq, _3) )
# 581 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 67 "parser.mly"
                              ( Binop(_1, Neq, _3) )
# 589 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 68 "parser.mly"
                              ( Binop(_1, Lt, _3) )
# 597 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 69 "parser.mly"
                              ( Binop(_1, Le, _3) )
# 605 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 70 "parser.mly"
                              ( Binop(_1, Gt, _3) )
# 613 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 71 "parser.mly"
                              ( Binop(_1, Ge, _3) )
# 621 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 72 "parser.mly"
                              ( Binop(_1, And, _3) )
# 629 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 73 "parser.mly"
                              ( Binop(_1, Or, _3) )
# 637 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 74 "parser.mly"
                              ( Sequence(_1, _3))
# 645 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
                              ( Assign(_1, _3))
# 653 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 76 "parser.mly"
                              ( IntLit(_1) )
# 660 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 77 "parser.mly"
                              ( BoolLit(_1) )
# 667 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 78 "parser.mly"
                              ( CharLit(_1) )
# 674 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 79 "parser.mly"
                              ( FloatLit(_1) )
# 681 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 80 "parser.mly"
                              ( StringLit(_1) )
# 688 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 81 "parser.mly"
                              ( Identifier(_1) )
# 695 "parser.ml"
               : 'expr))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.expr)
